<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: series | Dreaming Black Cat]]></title>
  <link href="http://dreamingblackcat.github.io/blog/categories/series/atom.xml" rel="self"/>
  <link href="http://dreamingblackcat.github.io/"/>
  <updated>2014-06-05T13:10:13+06:30</updated>
  <id>http://dreamingblackcat.github.io/</id>
  <author>
    <name><![CDATA[dbc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၄]]></title>
    <link href="http://dreamingblackcat.github.io/blog/2014/06/05/meet-ruby-4/"/>
    <updated>2014-06-05T12:01:50+06:30</updated>
    <id>http://dreamingblackcat.github.io/blog/2014/06/05/meet-ruby-4</id>
    <content type="html"><![CDATA[<p>ျပီးခဲ့ ေသာ<a href="http://dreamingblackcat.github.io/blog/2014/05/26/meet-ruby-3/">ေဆာင္းပါး</a> တြင္ ရူဘီ ၏ အေျခခံ OOP feature မ်ားကုိ ေဖာ္ျပခဲ့ ပါသည္။ ရူဘီသည္ ယခင္ေဆာင္းပါးမ်ားတြင္ ေရးခဲ့သည့္အတုိင္း Object မ်ား ကုိ အသုံးျပု ၍ ဖြဲ့ စည္းတည္ေဆာက္ထားေသာ language တစ္ခုျဖစ္ပါသည္။ Java အစရွိေသာ language မ်ားကဲ့ သုိ့ primitive data type မ်ားကုိ အေျခခံ၍ object မ်ား တည္ေဆာက္ေရးသားျခင္းမဟုတ္ပဲ။ Number နွင့္ String ကဲ့ သုိ့ primitive data type မ်ားသည္ ပင္လွ်င္ Object မ်ား အျဖစ္ဖြဲ့ စည္းတည္ေဆာက္ထားျခင္းျဖစ္ပါသည္။ ထုိ့ေျကာင့္ ရူဘီ ၏ OOP ကုိ နားလည္လုိပါ က ရူဘီ language အတြင္း object မ်ား အခ်င္းခ်င္း မည္သုိ့ မည္ပုံ သက္ေရာက္ဆက္နြယ္ေနသည္ ကုိ သိထားဖုိ့ လိုအပ္ပါသည္။</p>

<h3>Basic Object နွင့္ Object ေဆြစဥ္မ်ိ  ုးဆက္</h3>

<p>  ရူဘီ တြင္ အရာရာသည္ BasicObject ဟုေခါ္ေသာ object တစ္ခုကို အေျခခံျပီးတည္ေဆာက္ထားပါသည္။ ၎ BasicObject တြင္ object မ်ား အား တည္ေဆာက္၊ ရွင္းလင္း၊ ျပုျပင္ေျပာင္းလဲ၊ အသုံးခ်ေစနုိင္မည့္ အနည္းဆုံးလုိအပ္ေသာ feature အားလုံးကုိ ထည့္သြင္းထားပါသည္။ ထုိ object မွတစ္ဆင့္ အျခားေသာ language feature မ်ား အတြက္ inheritance ကုိ အသုံးခ် ၍ ျဖစ္ေစ၊ အျခားနည္းမ်ားျဖင့္ ျဖစ္ေစ  object မ်ား အဆင့္အဆင့္ တည္ေဆာက္သြားျခင္းျဖစ္သည္။<strong> (မွတ္ခ်က္။ ။ ရူဘီ အတြင္းပုိင္း object မ်ား၏ အလုပ္လုပ္ပုံသည္ အဓိက ရူဘီ ဗားရွင္း ျကီး မ်ားတြင္ အေျပာင္းအလဲမ်ားရွိျကပါသည္။ ဤ ေဆာင္းပါးသည္ ရူဘီ ဗားရွင္း 1.9.3 အား အသုံးျပုထားပါသည္။)</strong></p>

<p>  <code>BasicObject</code> ၏အေျခခံ feature မ်ားကုိ inherit လုပ္၍ object မ်ားအား runtime တြင္ dynamic စီမံခန့္ခြဲေစနုိင္မည့္ feature မ်ားကုိ ထပ္ျဖည့္ထားေသာ object မွာ <code>Object</code> ျဖစ္သည္။ စင္စစ္အားျဖင့္ က်န္သည့္ ရူဘီ object အား လုံးသည္ <code>Object</code> object ၏ desendent object မ်ား သာ ျဖစ္ပါသည္။ထုိ့ေျကာင့္ <code>BasicObject</code> နွင့္ <code>Object</code> တုိ့သည္ ရူဘီ object မ်ား အားလုံး၏ အရင္းအျမစ္ျဖစ္ပါသည္။
ထို object နွစ္ခု ေအာက္တြင္ <code>Module</code> object နွင့္ class-based OOP ကုိ အသုံးျပုေစနုိင္သည့္ <code>Class</code> object မ်ား အဆင့္ဆင့္ရွိျကပါသည္။ မွန္ပါသည္။ ရူဘီတြင္ class မ်ား ကုိယ္တုိင္က object ျဖစ္ပါသည္။ class keyword တစ္ခု အသုံးျပု ျပီး class အသစ္တစ္ခု ေျကညာျခင္းသည္ စင္စစ္အားျဖင့္ ေနာက္ကြယ္တြင္ Class object ၏ instance တစ္ခုတည္ေဆာက္လုိက္ျခင္းပင္ျဖစ္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Object Hierarchy in Ruby&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">One</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Two &amp;lt; One</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Three</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Two</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Create ob as instance of class Three&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="ow">and</span> <span class="nb">display</span> <span class="n">the</span> <span class="k">class</span> <span class="nb">name</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ob = Three.new</span>
</span><span class='line'><span class="sr">x = ob.class</span>
</span><span class='line'><span class="sr">puts( x )&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">now</span> <span class="n">climb</span> <span class="n">back</span> <span class="n">through</span> <span class="n">the</span> <span class="n">hierarchy</span> <span class="n">to</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;display all ancestor classes of ob&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">begin</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="nb">puts</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">inspect</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span> <span class="k">until</span> <span class="n">x</span> <span class="o">==</span> <span class="kp">nil</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Two
</span><span class='line'>One
</span><span class='line'>Object
</span><span class='line'>BasicObject
</span><span class='line'><span class="nv">nil</span>
</span><span class='line'><span class="o">=</span>&gt; nil
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>အထက္ပါ ကုတ္တြင္ class hierarchy အဆင့္ဆင့္ကုိ ေတြ့နုိင္ပါသည္။ ထူးျခားခ်က္မွာ <code>BasicObject</code> ၏ superclass သည္ nil ျဖစ္ပါသည္။ တစ္နည္းအားျဖင့္ BasicObject သည္ parent မရွိေသာ အေျခခံအက်ဆုံး object ပင္ျဖစ္ပါသည္။ <code>superclass</code> method သည္ BasicObject မွ ထည့္ေပးထားေသာ method တစ္ခုျဖစ္ျပီး object တစ္ခု၏ parent class ကုိ ေဖာ္ျပေပးပါသည္။ထုိ့ေျကာင့္ ရူဘီ တြင္ object instance အားလုံးသည္ <code>Object</code> ၏ descendent မ်ားသာ ျဖစ္ပါသည္။ထုိ့အတူ class မ်ား ကုိယ္တုိင္ကုိ လည္း <code>superclass</code> ေခါ္ျကည့္နုိင္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Class Hierarchy in Ruby&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">One</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Two &amp;lt; One</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Three</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Two</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span><span class="no">Three</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts(x.inspect)</span>
</span><span class='line'><span class="sr">x = x.superclass</span>
</span><span class='line'><span class="sr">end until x == nil&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Class
</span><span class='line'>Module
</span><span class='line'>Object
</span><span class='line'><span class="nv">BasicObject</span>
</span><span class='line'><span class="o">=</span>&gt; nil&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ထုိ့ေျကာင့္ <code>One</code> , <code>Two</code> , <code>Three</code>  အစရွိေသာ class မ်ားသည္လည္း BasicObject မွဆင္းသက္လာေသာ object မ်ားသာ ျဖစ္ေျကာင္းေတြ့နုိင္ပါသည္။ <code>Class</code> နွင့္ <code>Module</code> object မ်ားသည္ အျခား object မ်ားကုိ တည္ေဆာက္ရန္ဖြဲ့စည္းထားေသာ အထူး object နွစ္မ် ိုးျဖစ္ပါသည္။ ထုိ အထူး object နွစ္မ် ိ ုးကုိ အသုံးျပု ၍ သာမန္ class-based OOP ပုံစံအတိုင္း object မ်ား တည္ေဆာက္အသုံးျပု ျခင္းျဖစ္ပါသည္။ စင္စစ္အား ျဖင့္ <code>One</code> , <code>Two</code> စသည္တုိ့သည္ <code>Class</code> class ၏ instance object မ်ား အား သိမ္းဆည္းထားေသာ constant မ်ားသာ ျဖစ္ပါသည္။ ထုိ့ေျကာင့္ <code>class</code> keyword ျဖင့္ အသုံးျပု ၍ class တစ္ခု ေျကညာအတိုင္း <code>Class</code> class ၏ instance object တစ္ခုတည္ေဆာက္ျပီး မိမိတုိ့ေပးလုိေသာ class အမည္ constant ျဖင့္ ၎ object ကုိ store လုပ္ထားျခင္းသာျဖစ္ပါသည္။ ဤ ေနရာတြင္ ထူးျခားခ်က္မွာ <code>Class</code> class ၏ class သည္ ၎ ကုိယ္တုိင္ပင္ ျဖစ္ပါသည္။ ဤမ်ွ ဆုိလ်ွင္ ရူဘီတြင္ အရာရာသည္ object ျဖစ္ေျကာင္း ျမင္နုိင္ျပီဟု ထင္ပါသည္။</p>

<p>ထုိသုိ့ အရာရာ သည္ object မ်ား ျဖစ္သည့္ အားေလ်ာ္စြာ သာမန္ object မ်ားအား runtime တြင္ ျပု ျပင္ ေျပာင္းလဲသကဲ့သုိ့  <code>Class</code> object မ်ားအားလည္း runtime တြင္ ျပု ျပင္ေျပာင္းလဲနုိင္ပါသည္။ဤသည္ပင္ လွ်င္ ရူဘီ၏ dynamic ျဖစ္ေသာ စြမ္းအား အစစ္အမွန္ျဖစ္ပါသည္။</p>

<h3>အပြင့္ class မ်ား</h3>

<p>  ရူဘီတြင္ object တစ္ခု၏ တန္ဖုိးကုိ အခ်ိန္မေရြး ျပင္ဆင္ထည့္သြင္းနုိင္ပါသည္။ class မ်ားသည္ လည္း object မ်ားျဖစ္ရာ class မ်ားကုိ လည္း အခ်ိန္မေရြးအလြယ္တကူ ျပင္ဆင္နုိင္ပါသည္။ထုိသုိ့ ျပင္ဆင္နုိင္ရန္လည္း BasicObject နွင့္ Object မ်ား တြင္ method မ်ား ထည့္သြင္းေပးထားပါသည္။ Java အစရွိေသာ Compiled OOP language မ်ားတြင္ class တစ္ခုအားေျကညာျပီး compile လုပ္ျပီးသြားသည္နွင့္ ၎ ေျကညာ ခ်က္သည္ အေသျဖစ္သည္။ ၎ class ၏ ဖြဲ့စည္းတည္ေဆာက္ပုံကုိ ျပန္ compile မလုပ္ ပဲ ျပင္ဆင္နုိင္ခြင့္မရွိေတာ့ပါ။ ရူဘီမွာ မူ class မ်ားသည္ အပြင့္ ျဖစ္ပါသည္။ မိမိနွစ္သက္ရာ method တစ္ခုအား class တစ္ခုအတြင္းသို့ အခ်ိန္မေရြး ထည့္သြင္းနုိင္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Open Classes&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  &quot;John&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr"> p = Person.new</span>
</span><span class='line'><span class="sr">class Person</span>
</span><span class='line'><span class="sr">   def email&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="s2">&quot;john@gmail.com&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">p</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="nb">puts</span> <span class="nb">p</span><span class="o">.</span><span class="n">email</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ တြင္ ပထမဦးစြာ <code>Person</code> class တစ္ခု ေျကညာလုိက္ပါသည္။ ၎ <code>Person</code> class တြင္ <code>name</code> ဟူသည့္ method တစ္ခုသာ ပါပါသည္။ ထုိ့ေနာက္ ၎ <code>Person</code> instance တစ္ခု တည္ေဆာက္လုိက္ပါသည္။ထုိ့ေနာက္ ထပ္မံ၍ <code>Person</code> class ကုိ ေျကညာျပီး <code>email</code> method ကုိ ျဖည့္သြင္းပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>John
</span><span class='line'>&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#x74;&amp;#111;&amp;#x3a;&amp;#x6a;&amp;#111;&amp;#104;&amp;#110;&amp;#64;&amp;#103;&amp;#x6d;&amp;#97;&amp;#105;&amp;#108;&amp;#x2e;&amp;#x63;&amp;#111;&amp;#x6d;&quot;</span>&gt;&amp;#106;&amp;#111;&amp;#x68;&amp;#x6e;&amp;#64;&amp;#103;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#108;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</span><span class='line'><span class="o">=</span>&gt; nil&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
ရူဘီတြင္ class အားလုံးသည္ အပြင့္ class မ်ား ျဖစ္သျဖင့္ class definition အား တစ္ခုထက္ပုိ၍ ေျကညာေသာ္လည္း error မတက္ပါ။ ၎ <code>Person</code> class ၏ definition ကုိ သာ ထပ္မံ ျဖည့္သြင္းေသာ definition ျဖင့္ ျပင္ဆင္ျဖည့္သြင္းသြားမည္ျဖစ္ပါသည္။ ထုိ့ ေျကာင့္ <code>p</code> object သည္ မူလတည္ေဆာက္စဥ္က <code>email</code> method ကုိမသိခဲ့ ေသာ္ လည္း ထပ္မံေျကညာေသာ class definition အရ <code>email</code> method ကို သိရွိျပီး invoke လုပ္သြားျခင္းျဖစ္ပါသည္။</p>

<p>အပြင့္ class မ်ား သည္ ရူဘီ ၏ အလြန္အေရးပါေသာ စြမ္းအားတစ္ခု ျဖစ္ပါသည္။ အပြင့္ method မ်ားကုိ အသုံးခ် ၍ မူလ built-in ပါ၀င္ေသာ standard lirbray မ်ားကုိ ပင္ ျပင္ ဆင္ ထည့္သြင္းနုိင္ပါသည္။ဥပမာ ရူဘီ၏ built-in <code>String</code> class အတြင္း သုိ့ မိမိဘာသာ method တစ္ခု ထည့္သြင္းလုိသည္ ဆုိပါစုိ့။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Monkey Patching&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">kill_command</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts( &quot;Avada Cadabra&quot; )</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">s = String.new</span>
</span><span class='line'><span class="sr">s.kill_command</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Avada <span class="nv">Cadabra</span>
</span><span class='line'><span class="o">=</span>&gt; nil&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ ကုတ္ ကဲ့ သုိ့ <code>String</code> class ကုိ ဖြင့္၍ မိမိထည့္သြင္းလုိေသာ method အား ထည့္သြင္းလိုက္ရုံပင္ ျဖစ္သည္။ ထုိသုိ့ မူလရွိျပီးသား class မ်ား အား ျပင္ဆင္ထည့္သြင္းျခင္း အား Monkey Patching ဟုတ္ေခါ္ပါသည္။ သတိျပုရန္တစ္ခ်က္မွာ Monkey Patching သည္ မူလ class မ်ားအား overwrite လုပ္ျခင္း ျဖစ္ရာ ဂရုမျပုမိပါက မလုိလားအပ္ေသာ ေဘးထြက္ ဆုိးက်ိ  ုးမ်ား ျဖစ္နုိင္ေျကာင္း ျဖစ္သည္။</p>

<h3>Singleton method မ်ား</h3>

<p>အပြင့္ class မ်ားသည္ class တစ္ခု၏ ေဆာင္ရြက္နုိင္စြမ္းကို dynamically ျပု ျပင္နုိင္စြမ္းကုိေပးပါသည္။ သုိ့ေသာ္ တစ္ခါတစ္ရံ မိမိ ထပ္မံျဖည့္သြင္းလုိေသာ feature သည္ class တစ္ခုလုံးနွင့္ မသက္ဆုိင္ပဲ instance object တစ္ခုခုနွင့္ သာ သက္ဆုိင္ေနတတ္ျခင္းမ် ိ ုး ရွိတတ္ပါသည္။ ထုိ အခါမ် ိ ုး တြင္ Singleton method မ်ားကုိ အသုံးျပု နုိင္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Person class&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @name  = name</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">   def name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="vi">@name</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">mgmg</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Mg</span> <span class="no">Mg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">spiderman</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Peter</span> <span class="no">Parker</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ ကုတ္ Person class တစ္ခု ေျကညာျပီး Person instance နွစ္ခု တည္ေဆာက္လိုက္ပါသည္။ <code>spiderman</code> object ကုိသာ <code>super_power</code> method တစ္ခုထပ္ျဖည့္လုိသည္ဆုိပါစုိ့။ အကယ္၍ Person class ကုိ ထပ္ဖြင့္ ၍ <code>super_power</code> method ကုိ ထည့္သြင္းပါက <code>mgmg</code> object သည္ လည္း ၎ method ကုိ သိေနမည္ျဖစ္သည္။ ထုိ အခါမ် ိ ုး တြင္ <code>spiderman</code> instance အား method တစ္ခု ထပ္မံ ျဖည့္သြင္းနုိင္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Adding a singleton method&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">spiderman</span><span class="o">.</span><span class="nf">super_power</span>
</span><span class='line'>   <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kp">throw</span> <span class="n">some</span> <span class="n">web</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1.9.3-p448 :018 &gt;   spiderman.super_power
</span><span class='line'>throw some <span class="nv">web</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span><span class='line'>1.9.3-p448 :019 &gt; mgmg.super_power
</span><span class='line'>NoMethodError: undefined method &lt;code&gt;super_power<span class="err">&#39;</span> <span class="k">for</span> <span class="c">#&amp;lt;Person:0x8fa2334 @name=&quot;Mg Mg&quot;&amp;gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အလားတူပင္ class keyword ကုိ အသုံးျပု ၍ လည္း ေျကညာနုိင္ပါသည္။</code>class<code>keyword ကုိ သုံးလုိပါက</code>class<code>keyword ေနာက္တြင္</code>&lt;&lt;` operator  နွင့္ မိမိ ထည့္သြင္းလုိေသာ object instance ကုိ အသုံးျပု ရပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Adding a singleton method&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spiderman</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Peter</span> <span class="no">Parker</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">class</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">spiderman</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">super_power</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts &quot;jump around&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1.9.3-p448 :018 &gt;   spiderman.super_power
</span><span class='line'>jump <span class="nv">around</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span><span class='line'>1.9.3-p448 :019 &gt; mgmg.super_power
</span><span class='line'>NoMethodError: undefined method <span class="sb">`</span>super_power<span class="err">&#39;</span> <span class="k">for</span> <span class="c">#&amp;lt;Person:0x8fa2334 @name=&amp;ldquo;Mg Mg&amp;rdquo;&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
မည္သည့္နည္းကို အသုံးျပု ျပီး ေျကညာ သည္ ျဖစ္ေစ မိမိေျကညာလုိက္ေသာ method သည္ ၎ instance object အတြင္း singleton method တစ္ခု အျဖစ္ ၀င္ေရာက္သြားပါသည္။ object instance တစ္ခုတြင္ ရွိေသာ Singleton methods မ်ားကို သိလုိပါက &ldquo;Object#singleton_methods&rdquo; method ကုိ အသုံးျပု ၍ ျကည့္ရွုနုိင္ပါသည္။</p>

<p>အပြင့္ class မ်ား နွင့္ Singleton method မ်ားသည္ ရူဘီ၏ ေျပာင္းလဲျပင္လြယ္ျဖစ္မွုကို ေဖာ္ျပပါသည္။ ထုိ့ေျကာင့္ ရူဘီ class တစ္ခု ကုိ ေနရာတစ္ေနရာ ထက္ပုိ ၍  ေျကညာအသုံးျပု နုိင္သလုိ runtime ေရာက္မွ အလ်ဥ္းသင့္ သလို method မ်ား ထည့္သြင္း အသုံးျပု နုိင္ပါသည္။ ထုိသုိ့ dynamicနည္းျဖင့္ ထိန္းခ်  ုပ္ ေရးသား ျခင္းကို Meta Programming ဟုေခါ္ျပီး Meta Programming သည္ အဆင့္ျမင့္ ရူဘီ ပရုိဂရမ္မ်ား ေရးသားရာ၌ တြင္က်ယ္စြာ အသုံးျပု ေသာ Programming Technique တစ္မ် ိ ုး ျဖစ္ပါသည္။ Meta Programming အေျကာင္းနွင့္ ပတ္သက္၍ အလ်င္းသင့္လွ်င္ ထပ္မံေဖာ္ျပသြားပါဦးမည္။</p>

<h3>Class တစ္ခု အတြင္းရွိ Constant မ်ား</h3>

<p>ရူဘီ တြင္ class definition တစ္ခု အတြင္း၌ constant မ်ား ေျကညာနုိင္ပါသည္။ ထုိ constant မ်ားကုိ class အျပင္ မွ အသုံးခ်လုိပါက Scope Resolution Operator &ldquo;::&rdquo; ကုိ အသုံးျပု ၍ ေခါ္ယူနုိင္ပါသည္။ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Constant inside a class&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">A</span>
</span><span class='line'><span class="no">SOME_CONST</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="ss">A</span><span class="p">:</span><span class="ss">:SOME_CONST</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1.9.3-p448 :018 &gt;puts A::SOME_CONST
</span><span class='line'>&amp;ldquo;10&amp;rdquo;
</span><span class='line'><span class="o">=</span>&gt; nil
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>class အမည္မ်ားသည္လည္း Constant မ်ား ျဖစ္ျပီး class တစ္ခုအား အျခား class တစ္ခုအတြင္း တြင္ ညွပ္ ၍ ေျကညာနုိင္ပါသည္။ ထုိသုိ့ေျကညာျခင္းအားျဖင့္ namespace အျဖစ္ အက် ိ ုးသက္ေရာက္ အသုံးျပုနုိင္ပါသည္။သို့ရာတြင္ Namespace ေပးျခင္းကုိ Module မ်ားျဖင့္ သာ Namespace ေပးျခင္းက ပုိအသုံးမ်ား ပါသည္။</p>

<p>ဆက္ပါဦးမည္..</p>

<p>ေက်းဇူးတင္ပါသည္</p>

<p><em>dbc</em></p>

<p>ေရွ့ ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby-3/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၃</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၃]]></title>
    <link href="http://dreamingblackcat.github.io/blog/2014/05/26/meet-ruby-3/"/>
    <updated>2014-05-26T09:58:44+06:30</updated>
    <id>http://dreamingblackcat.github.io/blog/2014/05/26/meet-ruby-3</id>
    <content type="html"><![CDATA[<p>ျပီးခဲ့ ေသာ<a href="http://dreamingblackcat.github.io/blog/2014/05/26/meet-ruby-2/">ေဆာင္းပါး</a>တြင္ Looping Structures မ်ားအတြက္ အသုံးျပ ုနုိင္သည့္ နည္းလမ္းမ်ားကုိ ေဖာ္ျပခဲ့ပါသည္။ ယခု ရူဘီ ၏ object-oriented programming စြမ္းအား ကုိ မိတ္ဆက္ရန္ အခ်ိန္တန္ျပီဟုထင္ပါသည္။</p>

<h3>Class and Objects</h3>

<p>ရူဘီသည္  programming style တစ္မ်ိ  ုးထက္မက ေရးနုိင္ေသာ multi-paradign language တစ္ခုျဖစ္ပါသည္။ ၎တုိ့ ထဲတြင္ မွ object-oriented programming(OOP) ကုိ မ်ားစြာအသားေပးထားပါသည္။ သုိ့ေသာ္ Java ကဲ့ သုိ့ class အေျချပ ု OOP ပုံစံတစ္မ်ိ  ုးထဲေတာ့ မဟုတ္ပါ။ ရူဘီတြင္ အရာရာသည္ object ျဖစ္ပါသည္။ ယုတ္စြ အဆုံး 1 , 2, 3 အစရွိ interger literal မ်ား သည္ ပင္ object မ်ား ျဖစ္ပါသည္။ ရူဘီ တြင္ primitive data type ဟူ ၍ မရွိပါ။ ရူဘီ object မ်ား အခ်င္းခ်င္း method call မ်ား ျဖင့္ message မ်ား ပုိ့ ျခင္းအားျဖင့္ အလုပ္လုပ္ပါသည္။ ရူဘီ သည္ smalltalk ၏ object-based concept ကုိ အေျခခံ၍ တည္ေဆာက္ထားျခင္းျဖစ္ပါသည္။ ထုိ့ေျကာင့္ ရူဘီ ကုိ ထိထိေရာက္ေရာက္ အသုံးခ်လုိလွ်င္ ရူဘီ ၏ object model ကုိ ေတာ့ နားလည္ထားဖုိ့ လုိအပ္ပါသည္။ပထမဦးစြာ အျခား OOP language မ်ားကဲ့ သုိ ့ အသုံးျပ ုပုံကုိ ေဖာ္ျပပါမည္။</p>

<p>ပုံမွန္ OOP ကဲ့ သုိ့ ပင္ ရူဘီ တြင္ class မ်ား ေျကညာနုိင္ပါသည္။ class တစ္ခု သည္ object တစ္ခု ေဆာက္ဖုိ့ အတြက္ blueprint တစ္ခု ျဖစ္သည္။ ရူဘီတြင္ class တစ္ခုကို <code>class</code> keyword ျဖင့္ တည္ေဆာက္ျပီး  <code>class</code> keyword ေနာက္တြင္ မိမိ ေျကညာလုိေသာ class နာမည္ကုိ ေရးရပါသည္။ ထုိ့ေနာက္ <code>end</code> keyword ျဖင့္ အဆုံးသတ္ေပးရပါသည္။ ထုိ <code>class</code> နွင့္ <code>end</code> keyword နွစ္ခုအျကားတြင္ေရးေသာ ကုတ္သည္ ထုိ class နွင့္သက္ဆုိင္ေသာ ကုတ္ပင္ျဖစ္ပါသည္။<!-- more -->ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;defining a class&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္တြင္ <code>Car</code> ဟုေခါ္ေသာ class တစ္ခု ေျကညာလုိက္ပါသည္။ class အမည္မ်ားသည္ အျကီးစာလုံးျဖင့္ စရပါမည္။ ဤ သတ္မွတ္ခ်က္ မွာ <code>constant</code> မ်ားအတြက္ သတ္မွတ္ခ်က္ပင္ျဖစ္ပါသည္။ရူဘီတြင္ <code>constant</code> အားလုံးကုိ အျကီး စာလုံးျဖင့္ စေရးရပါသည္။ စင္စစ္အားျဖင့္ class အမည္မ်ား သည္ <code>constant</code> မ်ားသာ ျဖစ္ပါသည္။ အထက္ပါ <code>Car</code> class သည္ မည္သည့္ ကုတ္ မွ မပါေသာ class အခြံတစ္ခုသာ ျဖစ္ပါသည္။ class တစ္ခု ထဲ တြင္ member method မ်ား member variable မ်ား ပါ၀င္နုိင္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;defining a class&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">drive</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts &quot;I am driving&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္တြင္ Car class အတြင္းသုိ့ member method တစ္ခု ထည့္ သြင္းလုိက္ပါသည္။ ထုိ Car class ကုိ အသုံးျပ ု၍ object တစ္ခု တည္ေဆာက္လုိပါက <code>new</code> method ကုိ အသုံးျပု ရပါသည္။ <code>Car.new</code> ဟုဆုိလွ်င္ Car object တစ္ခုတည္ေဆာက္လုိက္ျခင္းပင္ျဖစ္သည္။ <code>new</code> method သည္ object instance တစ္ခု တည္ေဆာက္ေသာ method ပင္ ျဖစ္ပါသည္။ ရူဘီ တြင္ object instantiate လုပ္ ပုံ မွာ ပုံ မွန္ OOP language မ်ား နွင့္ ကြဲျပားပါသည္။ ရူဘီအတြက္ class အမည္ နွင့္ထပ္ တူ constructor method မ် ိ ုး မလုိအပ္ပါ။ထုိ သုိ့ constructor ပုံစံအတုိင္း အသုံးျပ ုနုိင္ ရန္ အထူး method တစ္ခု ရွိပါသည္။ ထုိ method မွာ <code>initialize</code> method ျဖစ္ပါသည္။ ရူဘီတြင္ <code>Car.new</code> စသျဖင့္ object တစ္ခုတည္ေဆာက္လုိက္သည္နွင့္ ၎ object ၏ class defintion တြင္ initialize method ရွိမရွိ စစ္ေဆးျပီး ရွိခဲ့ ပါ က ထုိ method ကုိ invoke လုပ္ပါသည္။ မွတ္ ရမည့္တစ္ခ်က္ မွာ<code>initialize</code> method သည္ constructor မဟုတ္ ပါ ။ Object constructor မွာ ရူဘီ မွ class အားလုံးအတြက္ အလုိအေလ်ာက္ေပးထားေသာ new method ျဖစ္သည္။ <code>initialize</code> method မွာ <code>new</code> ေခါ္ သည္ ့ အခ်ိန္ တြင္ dynamically ခ်ိတ္ဆက္ေပးေသာ hook method တစ္ခုသာ ျဖစ္ပါသည္။သို့ရာတြင္ <code>initialize</code> method အား constructor method တစ္ခု ကဲ့ သုိ့ အသုံးျပ ု၍ object member variable မ်ား ေျကညာနုိင္ပါသည္။ဥပမာ <code>Person</code> class တစ္ခုတည္ေဆာက္ျကည့္ပါမည္။ ၎ class တြင္ <code>first_name</code> နွင့္ <code>last_name</code> member variable နွစ္ခု ပါမည္ ဆုိပါစုိ့ ။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;a class with initialize method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">f_name</span><span class="p">,</span><span class="n">l_name</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  @first_name = f_name</span>
</span><span class='line'><span class="sr">  @last_name = l_name</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ ပုံစံ သည္ Member variable ၂ လုံးပါေသာ class တစ္ခုေဆာက္လုိက္ျခင္းပင္ ျဖစ္ပါသည္။၎ class ကုိ instantiate လုပ္မည္ဆုိပါက
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;instantiating a new object of a class with initialize method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Mg</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Hla</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ဟု ေရးလုိက္ရုံပင္ျဖစ္သည္။ ဤ တြင္ <code>new</code> method တြင္ ေပးရေသာ parameter နွစ္လုံးသည္ <code>initialize</code> method မွ လုိ အပ္ေသာ parameter နွစ္လုံး အတုိင္းပင္ေပးရျခင္းျဖစ္သည္ ကုိ သတိခ်ပ္ရန္လုိပါသည္။အကယ္၍ <code>Person.new("Mg")</code> ဟူ၍ parameter တစ္လုံးသာ ေပးခဲ့ လွ်င္ အလုပ္လုပ္မည္မဟုတ္ပါ။ Wrong Argument error ဟု ေပါ္လာမည္ျဖစ္သည္။ ဤသည္ မွာ Ruby Method မ်ားသည္ ၎တုိ့ကုိ ေျကညာထားသည့္ method parity  ေခါ္ parameter အေရအတြက္ အတိအက် ျဖစ္ဖုိ့ လုိေသာ ေျကာင့္ျဖစ္ပါသည္။ ထုိသုိ့ တင္းက်ပ္ေသာ parameter မ်ား အစား ေလ်ာ့ရဲ ေသာ parameter မ်ား အျဖစ္ သုံးလုိပါက default parameter မ်ား အသုံးျပုနုိင္ပါသည္။ default parameter မ်ားမွာ မည္သည့္ parameter မွ မထည့္ ေပးလုိက္ပါက default အျဖစ္ ယူဆမည့္တန္ဖုိး တစ္ခုကုိ method definition သတ္မွတ္ခ်ိန္တြင္ ထည့္ေပးခဲ့ ရျခင္းျဖစ္ပါသည္။ ၎၏ အသုံးျပ ု ပုံ မွာ မိမိ default ေပးလုိေသာ parameter ေနာက္ တြင္ ေပးလုိေသာ value ကုိ တစ္ပါတည္း assign သတ္မွတ္ေပးလုိက္ရပါသည္။ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;default parameters&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">f_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Shwe</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="n">l_name</span><span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Ba</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@first_name = f_name</span>
</span><span class='line'><span class="sr">@last_name = l_name</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
ထုိသုိ့ default parameter အသုံးျပု လိုက္ပါက <code>Person.new</code> ဟု မည္သည့္ parameter မွ မပါပဲ ေခါ္လ်ွင္လဲ default parameter မ်ား ကုိ အသုံးျပ ု၍ object တည္ေဆာက္သြားမည္ျဖစ္ပါသည္။မွတ္ရန္တစ္ခ်က္မွာ ဤ နည္းသည္ method parity check ကုိ ေက်ာ္လွြားလုိက္ျခင္းမဟုတ္ပါ။ ရွိျပီးသား parameter မ်ားမွ တစ္ခ်ိ  ု့ သုိ့မဟုတ္ အားလုံးကုိ သာ optional ျဖစ္ေအာင္ လုပ္လုိက္ျခင္းျဖစ္သည္။မူလ parameter အားလုံးထက္ပုိေပး၍ method ကုိ ေခါ္ျကည့္ ပါ က wrong argument error တက္ဦးမည္သာ ျဖစ္ပါသည္။</p>

<h4>Inheritance</h4>

<p>OOP ျဖင့္ ေရးရေသာ language အားလုံးတြင္ inheritance ကေတာ့ ပါျကသည္ခ်ည္းပင္ျဖစ္ပါသည္။ ရူဘီ၏ inheritance မွာ Java ကဲ့သုိ့ single inheritance ျဖစ္သည္။ ရူဘီတြင္ class တစ္ခုသည္ အျခား class တစ္ခုတည္းဆီ မွ သာ inherit လုပ္လုိ့ ရပါသည္။ multiple inheritance ကုိ support မေပးပါ။ ရူဘီ ၏ inheritance syntax မွာ မိမိ inherit လုပ္လုိေသာ base class ကုိ မိမိ class ေျကညာ ခ်က္ ေနာက္တြင္ <code>&lt;</code> sign ျဖင့္ တြဲေရးလုိက္ရုံသာျဖစ္ပါသည္။ဥပမာ <code>Circle</code> class သည္ <code>Shape</code> class အား inherit လုပ္လုိသည္ဆုိပါစုိ့ ။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;default parameters&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Circle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Shape</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္အတိုင္းေရးလိုက္ရုံသာျဖစ္ပါသည္။ Inherit လုပ္ထားေသာ child class သည္ parent class ၏ method မ်ား၊ member variable မ်ား အား အေမြ ဆက္ခံရရွိပါသည္။ အကယ္၍ parent class ၏ method တစ္ခုကို override လုပ္လုိပါက child class တြင္ ထုိ method implementation code ကုိ ထည့္ေရးလုိက္ပါက parent class ၏ method အား override လုပ္ျပီးသားျဖစ္ပါသည္။ အကယ္၍ မူလ parent method ကုိ overriden method အတြင္း ေခါ္လုိပါကလည္း <code>super</code> keyword ျဖင့္ ေခါ္နုိင္ပါသည္။ Java,C# အစရွိေသာ OOP language မ်ား တြင္ multiple inheritance ပုံစံအသုံးျပ ုလုိပါက Interface မ်ား သုံးျကပါသည္။ ရူဘီ တြင္ Interface မရွိပါ။ သုိ့ေသာ္ interface မ်ား၏ functionality အျပင္ အျခား စြမ္းေဆာင္ရည္မ်ားပါ၀င္ေသာ<code>module</code> မ်ား ရွိပါသည္။ <code>module</code> မ်ား အေျကာင္းကုိ module အေျကာင္းေရာက္ မွ ဆက္လက္ရွင္းသြားပါမည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Method Overriding&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Shape</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">draw</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts &quot;I am a shape&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Circle</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Shape</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">draw</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  super</span>
</span><span class='line'><span class="sr">  puts &quot;And I am circle&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">Circle.new.draw</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>I am a shape
</span><span class='line'>And I am <span class="nv">circle</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ ဥပမာ တြင္ မူရင္း Shape class ၏ draw method ကုိ child class ျဖစ္ေသာ Circle တြင္ override လုပ္ထားပါသည္။ ထုိ့ေနာက္ <code>Circle.new</code> ျဖင့္ Circle object တစ္ခု တည္ေဆာက္၍ ထုိ objectအေပါ္တြင္ <code>draw</code> method ကုိ ေခါ္လိုက္ပါသည္။ ဤ ေနရာတြင္ <code>super</code> keyword ကုိ အသုံးျပ ုျပီး မူလ class ၏ method ကုိ ေခါ္ထားပါသည္။</p>

<h4>Access Modifier</h4>

<p>Access Modifier သတ္မွတ္ျခင္း သည္ OOP တြင္ Data နွင့္ interface ကုိ ခြဲျခားျခင္း (Encapsulation) အတြက္ အေရးပါေသာ ဂုဏ္ရည္ တစ္ခု ျဖစ္ပါသည္။ ရူဘီ တြင္ variable မ်ား နွင့္ method မ်ား ၏ scope ကုိ သတ္မွတ္ ရန္ access modifier keyword သုံးမ် ိ ုး ရွိပါသည္။ ၎တုိ့မွာ <code>public</code>, <code>private</code> နွင့္ <code>protected</code> တို့ ျဖစ္သည္။ <code>public</code> variable မ်ား နွင့္ method မ်ားအား မည္သူမဆုိ access လုပ္လုိ့ရပါသည္။ ရူဘီ တြင္ Method အားလုံးအတြက္ default modifier မွာ <code>public</code> ျဖစ္ပါသည္။ @ နွင့္စေသာ instance variable အားလုံး အတြက္ modifier မွာ အျမဲတမ္း <code>private</code> ျဖစ္ျပီး မည္သူမွ် မျပင္နုိင္ပါ။ ထုိ့ေျကာင့္ class တစ္ခု ၏ member variable တစ္လုံးကို အသုံးျပုလုိပါ က method မ်ားကတစ္ဆင့္သာ အသုံးျပ ုနုိင္ပါသည္။<code>private</code> member မ်ားသည္ ၎တုိ့အား ေျကညာထားေသာ class အတြင္းမွ တစ္ပါး အျခား မည္သည့္ေနရာတြင္ မွ access လုပ္၍ မရပါ။ <code>protected</code> modifier ျဖင့္သတ္မွတ္ထားေသာ method မ်ားမွာမူ မူလ class နွင့္ ၎ ၏ child class မ်ား၊ သို့မဟုတ္ မူလ class ၏ အျခားေသာ instance object တစ္ခု  အစရွိသည္တုိ့ သာ access လုပ္၍ ရပါသည္။ method မ်ား အား access modifier မ်ား အသုံးျပု လုိပါက နွစ္မ်ိ  ုး အသုံးျပ ုနုိင္ပါသည္။ ပထမတစ္မ်ိ  ုးမွာ  method definition အေရွ့ တြင္ <code>public</code>, <code>protected</code>, <code>private</code> အစရွိေသာ modifier keyword မ်ား ေျကညာရပါသည္။ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;access modifier keywords&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="kp">public</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">first_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nf">last_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="kp">private</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">secret_short_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nf">secret_nick_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">proctected</span>
</span><span class='line'><span class="sr">   def middle_short_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   def middle_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္တြင္ <code>public</code> keyword ေအာက္မွ method အားလုံးသည္ public method မ်ား၊ <code>private</code> keyword ေအာက္မွ method မ်ား သည္ private method မ်ား ၊ <code>protected</code> keyword ေအာက္မွ method မ်ားသည္ protected method မ်ား အသီးသီးျဖစ္ျကပါသည္။ ဒုတိယ တစ္မ် ိ ုးမွာ <code>public</code>,<code>private</code>, <code>protected</code> အစရွိေသာ built-in access control function မ်ားသုံးျခင္းျဖစ္သည္။ ၎ function မ်ား ေနာက္ တြင္ မိမိ access modifier သတ္မွတ္ လုိေသာ method အမည္မ်ားကုိ symbol အျဖစ္ parameter ေပးလုိက္ရပါသည္။ ရူဘီ တြင္ symbol ဆုိသည္ မွာ <code>:</code> ျဖင့္ စေသာ နာမည္မ်ား ကုိ ဆုိလုိပါသည္။ method နာမည္မ်ား hash key မ်ား အတြက္ symbol မ်ားကုိ သုံးပါသည္။ Symbol မ်ား အေျကာင္း ကုိ သက္ဆုိင္ရာ ေခါင္းစဥ္ ေအာက္တြင္အေသးစိတ္ရွင္းသြားပါမည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;access modifier functions&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">first_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">def</span> <span class="nf">last_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">   def secret_short_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   def secret_nick_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   def middle_short_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   def middle_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>   <span class="kp">private</span> <span class="ss">:secret_nick_name</span><span class="p">,</span><span class="ss">:secret_short_name</span>
</span><span class='line'>   <span class="kp">protected</span> <span class="ss">:middle_name</span><span class="p">,</span><span class="ss">:middle_short_name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ <code>Person</code> class သည္ ျပီးခဲ့ေသာ <code>Person</code> class နွင့္ အတူတူပင္ျဖစ္ပါသည္။ သုိ့ရာတြင္  access modifier keyword မ်ား အစား access modifier function မ်ားကုိ သုံးထားပါသည္။</p>

<h4>Class level and Instance level variables, methods</h4>

<p>Variable မ်ား အေျကာင္းေျပာခဲ့စဥ္က<code>@</code> ျဖင့္စေသာ instance variable မ်ား နွင့္  <code>@@</code> ျဖင့္ စေသာ class variable မ်ားရွိေျကာင္း မိတ္ဆက္ခဲ့ပါသည္။ ယခုအက်ယ္ထပ္ရွင္းပါမည္။ instance variable မ်ားသည္ object တစ္ခု instantiate လုပ္ မွ ထုိ object အတြက္ တည္ေဆာက္ေသာ variable မ်ားျဖစ္ပါသည္။ ထုိ့ေျကာင့္ <code>ClassName.new</code> ပုံစံျဖင့္ တည္ေဆာက္မထားမခ်င္း အသက္၀င္ တည္ရွိေသးမည္ မဟုတ္ပါ။ class variable မ်ား မွာ class တစ္ခုလုံးနွင့္ သက္ဆုိင္ေသာ <code>Singleton</code> ဟုေခါ္ေသာ တစ္ခုတည္းတည္ရွိသည့္ variable မ်ား ျဖစ္ပါသည္။ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Class variables&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BlueCar</span>
</span><span class='line'>   <span class="vc">@@color</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">blue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>   <span class="k">def</span> <span class="nf">show_color</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts @@color</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">   def change_color(color)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="vc">@@color</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;car1 = BlueCar.new</span>
</span><span class='line'><span class="sr">car1.show_color</span>
</span><span class='line'><span class="sr">car1.change_color(&amp;ldquo;red&amp;rdquo;)</span>
</span><span class='line'><span class="sr">car2 = BlueCar.new</span>
</span><span class='line'><span class="sr">car2.show_color</span>
</span><span class='line'><span class="sr">car2.change_color(&amp;ldquo;green&amp;rdquo;)</span>
</span><span class='line'><span class="sr">car1.show_color</span>
</span><span class='line'><span class="sr">car2.show_color</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1.9.3-p448 :082 &gt;
</span><span class='line'>1.9.3-p448 :083 &gt;   <span class="nv">car1</span> <span class="o">=</span> BlueCar.new
</span><span class='line'> <span class="o">=</span>&gt; <span class="c">#&amp;lt;BlueCar:0x994385c&gt;</span>
</span><span class='line'>1.9.3-p448 :084 &gt; car1.show_color
</span><span class='line'><span class="nv">blue</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span><span class='line'>1.9.3-p448 :085 &gt; car1.change_color<span class="o">(</span>&amp;ldquo;red&amp;rdquo;<span class="o">)</span>
</span><span class='line'> <span class="o">=</span>&gt; &amp;ldquo;red&amp;rdquo;
</span><span class='line'>1.9.3-p448 :086 &gt; <span class="nv">car2</span> <span class="o">=</span> BlueCar.new
</span><span class='line'> <span class="o">=</span>&gt; <span class="c">#&amp;lt;BlueCar:0x992936c&gt;</span>
</span><span class='line'>1.9.3-p448 :087 &gt; car2.show_color
</span><span class='line'><span class="nv">red</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span><span class='line'>1.9.3-p448 :088 &gt; car2.change_color<span class="o">(</span>&amp;ldquo;green&amp;rdquo;<span class="o">)</span>
</span><span class='line'> <span class="o">=</span>&gt; &amp;ldquo;green&amp;rdquo;
</span><span class='line'>1.9.3-p448 :089 &gt; car1.show_color
</span><span class='line'><span class="nv">green</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span><span class='line'>1.9.3-p448 :090 &gt; car2.show_color
</span><span class='line'><span class="nv">green</span>
</span><span class='line'> <span class="o">=</span>&gt; nil
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>အထက္ပါကုတ္တြင္ class variable <code>@@color</code> အား car1 နွင့္ car2 တစ္ခုခုမွ ေျပာင္းလဲလုိက္ပါက က်န္သည့္ object မ်ား အတြက္ ပါ ေျပာင္းလဲသြားေျကာင္းေတြ့နုိင္ပါသည္။</p>

<p>variable ကဲ့သုိ့ ပင္ method မ်ားတြင္လည္း class method နွင့္ instance method နွစ္မ်ိ  ုးရွိပါသည္။ သေဘာတရားမွာ အတူတူပင္ျဖစ္ပါသည္။ instance method မ်ားသည္ <code>ClassName.new</code> ပုံစံျဖင့္ object တည္ေဆာက္ျပီးမွ ထုိ object အေပါ္တြင္ <code>.</code> sign အား အသုံးျပ ု၍ ေခါ္ရေသာ method မ်ားျဖစ္ပါသည္။ class method မ်ားမွာ ေယဘုယ် generic method မ်ားျဖစ္ျပီး Object တစ္ခု ခ်င္းစီနွင့္ မသက္ဆုိင္ေသာ ကုတ္မ်ား ကုိ ထည့္သြင္းနုိင္ရန္ ထားေပးထားျခင္းျဖစ္သည္။ class method မ်ားကုိ တည္ေဆာက္လုိလွ်င္ method name ၏ ေရွ့ တြင္ <code>self</code> keyword ကုိ ထည့္ေပးရျပီး ၎တုိ့ကုိ အသုံးျပ ုလုိပါက <code>ClassName.method_name</code> ပုံစံျဖင့္ class အမည္ကုိ တုိက္ရုိက္အသုံးျပု ၍ ေခါ္ရပါသည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Class methods&rdquo;</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ComputerStudent</span>
</span><span class='line'>   <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">school_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts &quot;UCSY&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">ComputerStudent.school_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Class methods&rdquo; lang;ruby</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1.9.3-p448 :096 > ComputerStudent.school_name
</span><span class='line'>UCSY
</span><span class='line'> => nil</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ ကုတ္ တြင္ <code>ComputerStudent</code> class အတြက္ class level method တစ္ခု ေျကညာလုိက္ပါသည္။ ေက်ာင္း၏နာမည္သည္ ေက်ာင္းသားတစ္ေယာက္ခ်င္းစီနွင့္ မသက္ဆုိင္ပဲ ေက်ာင္းတစ္ခုလုံးနွင့္သာ သက္ဆုိင္သည့္ အတြက္ ၎ကုိ class method ျဖင့္ ေျကညာပါသည္။ ထုိ့ေျကာင့္ ေက်ာင္းနာမည္ကုိ သိရွိလုိပါက ေက်ာင္းသား object တစ္ခုတည္ေဆာက္စရာမလုိပဲ<code>ComputerStudent.school_name</code> ဟု class method ကုိ လွမ္းေခါ္လုိက္ရုံျဖင့္ output ထုတ္ေပးသြားမည္ျဖစ္သည္။ထုိ့ေျကာင့္ class method မ်ားအား object တစ္ခုေျကညာစရာ မလုိသည့္ တစ္နည္းအားျဖင့္ object member variable မ်ားကုိ အသုံးျပု စရာမလုိသည့္ ေယဘုယ် အေျခအေနမ်ား အတြက္ အသုံးျပ ုနုိင္ပါသည္။</p>

<p>ဆက္ပါဦးမည္..</p>

<p>ေက်းဇူးတင္ပါသည္</p>

<p><em>dbc</em></p>

<p>ေရွ့ ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby-2/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၂</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby နွင့္ ေတြ့ ဆုံျခင္း ၂]]></title>
    <link href="http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-2/"/>
    <updated>2014-05-20T13:20:52+06:30</updated>
    <id>http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-2</id>
    <content type="html"><![CDATA[<p>ျပီးခဲ့ ေသာ <a href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby/">ေဆာင္းပါး</a> တြင္ ရူဘီ language မိတ္ဆက္အျဖစ္ variable, types, condtionals စသည္တုိ့ အေျကာင္း ေရးခဲ့ပါသည္။ ဆက္လက္၍ looping structures မ်ား အေျကာင္း ေဖာ္ျပသြားပါမည္။</p>

<h3>Looping Structures</h3>

<p>   ပုံမွန္အားျဖင့္ programming basic တြင္ conditional မ်ား ျပီးသည္နွင့္ looping structure မ်ား လာရျမဲ ျဖစ္သည္။ သုိ့ ေသာ္ ရူဘီ တြင္ looping အသုံးျပု ပုံသည္ အျခား language မ်ားနွင့္ ျခားနားပါသည္။ Loop structure ကုိ သုံး ရန္ အေျကာင္းျပခ်က္ အျကမ္းအားျဖင့္ ၂ မ်ိ  ုး ရွိသည္ဟု ဆုိနုိင္ပါသည္။ တစ္မ် ိ ုး မွာ အျကိမ္ျကိမ္ အဖန္ဖန္ လုပ္ရေသာ အရာ မ်ား အတြက္ သုံးျခင္းျဖစ္ျပီး ေနာက္တစ္မ်ိ  ုးမွာေတာ့ collection ဟုေခါ္ေသာ data ကုိ အစုအေ၀း ျဖင့္ သိမ္းဆည္းသည့္ data structure မ်ားကုိ သုံးျခင္း၊ ျပင္ျခင္း၊ အသစ္ထည့္ျခင္း မ်ား ျပုလုပ္ရန္ျဖစ္သည္။ ရူဘီ တြင္ နွစ္မ်ိ  ုးလုံးအတြက္ loop structure မ်ား သီးသန့္ ရွိပါသည္။ ပထမတစ္မ်ိ  ုးတြင္ အက်  ုံး ၀င္ေသာ  looping မ်ား အတြက္ <code>loop</code>, <code>while</code>,<code>until</code> နွင့္ <code>for in</code> control structure မ်ား ရွိသည္။အရုိးရွင္းဆုံးမွာ <code>loop</code> statement ျဖစ္သည္။</p>

<h4><code>loop</code> statement</h4>

<p>   <code>loop</code> statement ကို အရုိးရွင္းဆုံး infinite loop တစ္ခုအတြက္သုံးနုိင္သည္။ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;loop Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="kp">loop</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; puts &quot;hello&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ loop သည္ user က ctrl+c မနွိပ္မခ်င္း loop ပတ္ေနမည့္ infinite loop တစ္ခုျဖစ္သည္။ သူ့ခ်ညး္ သက္သက္ကေတာ့ သိပ္အသုံးမ၀င္ ပါ။ သုိ့ ေသာ္ ထုိ loop ကုိ control လုပ္နုိင္မည့္ <code>break</code>, <code>next</code> နွင့္ <code>redo</code> keyword မ်ားလည္းရွိပါသည္။ <code>break</code> keyword သည္ loop ကုိ ရပ္သြားေစမည့္ keyword ျဖစ္ျပီး <code>next</code> keyword ကေတာ့ လက္ရွိအျကိမ္ ေက်ာ္ ၍ ေနာက္တစ္ေက်ာ့ကုိ skip လုပ္မည့္ keyword ျဖစ္သည္။ <code>redo</code> ကေတာ့ လက္ ရွိအေက်ာ့ကုိ ထပ္ေက်ာ့ လုပ္ေစမည့္ keyword ျဖစ္သည္။ ၎ keyword မ်ား ျဖင့္ တြဲသုံးပါက loop statement သည္ လည္း အစြမ္းထက္ေသာ control structure တစ္ခု ျဖစ္လာပါသည္။</p>

<!-- more -->


<h4><code>while</code> loop</h4>

<p>   <code>while</code> statement ကေတာ့ အျခား language မ်ား နွင့္ထပ္တူျဖစ္သည္။ <code>while</code> keyword ေနာက္ တြင္ ေပးထားေသာ အေျခအေန တစ္ခု ေျပလည္ေနသ၍ looping ပတ္ေပးမည့္ statement ျဖစ္သည္။ ဥပမာ-
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;while Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">  i += 1</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ သည္ ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>until</code> loop</h4>

<p>   <code>until</code>statement သည္ while statement နွင့္ ေရးသားပုံျခင္းတူျပီး while ၏ ဆန့္က်င္ဘက္ ျဖစ္သည္။ <code>until</code> loop ၏ အသုံးျပု ပုံ မွာ <code>until</code> ေနာက္တြင္ ေပးထားေသာ conditional မေျပ လည္ေသးသ၍ျပ ုလုပ္မည္ျဖစ္ျပီး ေျပလည္သြားသည့္အခ်ိန္တြင္ ျပုလုပ္ေတာ့မည္ မဟုတ္ေပ။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;until Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">until</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">  i += 1</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ သည္ ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3
</span><span class='line'>   4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>until</code> နွင့္ <code>while</code> မွာ <code>if</code> နွင့္ <code>unless</code> ကဲ့သုိ့ပင္ ျဖစ္သည္။ ၎တုိ့ ကုိ one line loop မ်ား အျဖစ္ တစ္ေျကာင္းပုံစံျဖင့္လည္းေရးနုိင္သည္။ဥ ပမာ <code>puts i while i &gt; 4</code> , <code>puts i until i &lt; 4</code> စသျဖင့္ ပုံစံမ် ိ ုးလည္း သုံးလုိ့ရသည္။ ရူဘီ တြင္ <code>do while</code> statement မရွိေပ။ <code>do while</code> ကဲ့ သုိ့ အနည္းဆုံးတစ္ျကိမ္ လုပ္ေစလုိ ေသာ loop မ် ိ ုးတြင္ loop instruction အား <code>begin</code> နွင့္ <code>end</code> keyword မ်ား အတြင္း ၌ ထည့္ေပးရသည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;do while style Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">i</span><span class="o">=</span><span class="mi">11</span>
</span><span class='line'>   <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; print &quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="sr"> &quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   i+=1</span>
</span><span class='line'><span class="sr">   end while i &amp;lt; 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္တြင္ begin end အတြင္းမွ expression သည္ အနည္းဆုံး တစ္ျကိမ္ အလုပ္လုပ္ မည္ ျဖစ္ျပီး ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   <span class="nv">11</span>  <span class="o">=</span>&gt;  nil
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>for in</code> loop</h4>

<p>   <code>for in</code> loop သည္ iterator ပုံစံမ်ိ  ုးသုံးရေသာ loop ျဖစ္သည္။ ဒုတိယ အမ် ိ ုးအစား loop အတြင္း ၌ ပါ၀င္ေသာ္လည္း loop structure သက္သက္ ပုံစံမ် ိ ုးျဖစ္၍ ဤ ေနရာတြင္ ေဖာ္ျပလုိက္ပါသည္။ <code>for</code> keyword ေနာက္ တြင္ မိမိ ထားလုိသည့္ variable ကုိထား ၍ <code>in</code> keyword ေနာက္တြင္ မိမိ ပတ္လုိသည္ ့ collection ကုိ ထည့္ေပးရသည္။ ဥပမာ Range object တစ္ခု ျဖစ္ေသာ <code>1..4</code> ကို ပတ္လုိသည္ ဆုိပါစို့ ။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;for in Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါအတုိင္း <code>for in</code> loop ကုိသုံးနုိင္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3
</span><span class='line'>   4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
   အထက္ပါ looping control statement မ်ား အားလုံး တြင္ <code>break</code> , <code>next</code>, <code>redo</code> နွင့္ <code>retry</code> keyword မ်ားကုိ သုံးနုိင္ပါသည္။ ရူဘီ သည္ ျပသနာတစ္ခုကုိ နည္းလမ္းမ်ိ  ုးစုံ နွင့္ ေျဖရွင္းနုိင္ေသာ language တစ္ခု ျဖစ္ပါသည္။ အမွန္အကန္ဆုံးနည္း ဟူ၍ မရွိပါ။ မိမိ အဆင္ေျပသလို ယူသုံးယုံပင္ျဖစ္သည္။ ရူဘီသည္ code ၏ ေဖာ္ျပနုိင္စြမ္းကို အဓိကထားသည္ျဖစ္ရာ <code>while</code> loop ကုိ not conditional မ်ိ  ုး နွင့္ သုံးျခင္းထက္ <code>until</code> loopကုိ သုံးျခင္းမ်ိ  ုးကုိ ပုိမုိ အားေပးပါသည္။
  ပုံမွန္ ျက ုံေတြ့  ေနရေသာ ျပသနာမ်ား တြင္ data collection မ်ားကုိ ကုိင္တြယ္ျပင္ဆင္ရေသာ အေျခအေနမ်ိ  ုးက မ်ားေလ့ရွိပါသည္။ ထုိအေျခအေနမ်ား အတြက္ ဒုတိယအမ်ိ  ုးအစား loop မ်ားက ပုိ မုိ အသုံး၀င္ပါသည္။ထုိ ကဲ့ သုိ့ looping မ်ားအတြက္ ရူဘီ standard library အတြင္း iterator ပုံစံ method မ်ား စြာ ထည့္သြင္းေပးထားပါသည္။ ထုိ method မ်ား သည္ ရူဘီ ၏ <code>block</code> ,<code>proc</code> နွင့္ <code>lambda</code> object မ်ား ၏ သဘာ၀ကုိ အေျခခံထားပါသည္။ ဤေနရာတြင္ ၎တုိ့ အေျကာင္းကုိ အျကမ္းမွ်သာ ရွင္းျပီး အသုံးမ်ားေသာ iterator method မ်ားကုိ ေဖာ္ျပသြားပါမည္။</p>

<h4><code>each</code> method</h4>

<p>   iterator မ်ား အနက္ အသုံး၀င္ဆုံး method မွာ <code>each</code> method ျဖစ္သည္။ <code>each</code> method သည္ Enumerable module ၏ method တစ္ခုျဖစ္သည္။ Array, Hash အစရွိေသာ collection object မ်ားတြင္ ထည့္သြင္းေပးထားပါသည္။ <code>each</code> method ကုိ ေခါ္လုိလွ်င္ collection object ျဖင့္ ေခါ္၍ parameter အျဖစ္ block တစ္ခု ေပးရပါသည္။ ရူဘီ တြင္ block ဆုိသည္မွာ execute ျပု လုပ္နုိင္ေသာ ကုတ္အပိုင္းအစတစ္ခု ျဖစ္သည္။ ထူးျခားခ်က္မွာ ထုိ ကုတ္အပိုင္းအစကို method မ်ားတြင္ parameter အျဖစ္ ေပးနုိင္ျခင္းျဖစ္သည္။ဥပမာ Array တစ္ခုကုိ <code>each</code> method အသုံးျပ ု ၍ iterate လုပ္လုိသည္ဆုိပါစို့ &hellip;
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;each method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ တြင္ <code>[1,2,3,4]</code> သည္ Array တစ္ခုျဖစ္ျပီး  ထုိ Array ေပါ္တြင္ .each ဟူ၍ <code>each</code> method ကုိ ေခါ္လုိက္သည္။ ထုိ့ေနာက္ ၎ <code>each</code> method အား <code>do</code> နွင့္ <code>end</code> နွစ္ခုအျကားတြင္ ကုတ္အပိုင္းအစ တစ္ခု အား block အျဖစ္ parameter ေပးလုိက္ျခင္းျဖစ္သည္။ block တစ္ခု အား <code>do</code> ,<code>end</code> keyword နွစ္ခု အျကားတြင္ ကုတ္ အပိုင္းအစကုိ ေရးျခင္းျဖင့္လည္းေကာင္း၊ <code>{</code>,<code>}</code> တြန့္ကြင္း နွစ္ခု အျကားတြင္ ကုတ္အပိုင္းအစေရးျခင္းျဖင့္ လည္းေကာင္း ေဖာ္ျပနုိင္သည္။ ဤ ေနရာ တြင္ <code>do</code> , <code>end</code> ပုံစံကုိ သုံးထားျခင္းျဖစ္သည္။ <code>do</code> ၏ ေနာက္ကပ္ရပ္တြင္ <code>|</code> character နွစ္ခု အျကား ေရးထားေသာ <code>i</code> သည္ ထုိ ကုတ္အပိုင္းအစ အတြက္ parameter တစ္ခု ျဖစ္သည္။ (~ block အေျကာင္းကုိ သက္ဆုိင္ရာ ေခါင္းစဥ္ေအာက္တြင္အေသးစိတ္ထပ္မံရွင္းသြားပါမည္။)
<code>each</code> method ၏ အလုပ္လုပ္ပုံမွာ Collection အတြင္းမွ item တစ္ခုခ်င္းစီကုိ ေပးထားသည့္ block အား parameter အျဖစ္ ေပး၍ execute လုပ္ ေစျခင္း ျဖစ္သည္။ <code>for in</code> loop နွင့္ အလုပ္လုပ္ပုံျခင္းဆင္တူျဖစ္သည္။ ထုိ့ေျကာင့္ Array အတြင္း တြင္ item 3 ခု ရွိပါက item တစ္ခုခ်င္းစီကုိ parameter အျဖစ္သုံး၍ block အတြင္းမွ ကုတ္အပိုင္းအစကုိ သုံးခါ အလုပ္လုပ္သြားမည္ျဖစ္သည္။
အထက္ပါ ဥပမာ တြင္ Array item မ်ားျဖစ္ေသာ <code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>တုိ့ကုိ သုံး၍ တစ္ခု ခ်င္းစီကုိ <code>i</code> အျဖစ္ျဖင့္ <code>puts i</code> statement ကုိ အလုပ္လုပ္သြားျပီး ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3
</span><span class='line'>   4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
   <code>each</code> method သည္ အလြန္အသုံး၀င္ေသာ method တစ္ခုျဖစ္ပါသည္။ ထုိ့ အျပင္ <code>each</code> method သုံးထားေသာ ကုတ္ကုိ ျကည့္ပါ။ <code>[1,2,3,4].each</code>  english ဘာသာျဖင့္  ၁ ၂ ၃ ၄ တစ္ခုခ်င္းစီကုိ ဟု ေရးထား ျခင္းပင္ ျဖစ္သည္။ ထုိ့ေျကာင့္ each method သည္ ဘာလုပ္မည္ ျဖစ္ေျကာင္းကုိ ရွင္းရွင္းလင္းလင္းေဖာ္ျပထားျပီးသားျဖစ္သည္။ ထုိ့ အျပင္ ကြ်န္ေတာ္တုိ့ သည္ each ဟုေျပာလုိက္ခ်င္းအားျဖင့္ တစ္ခုခ်င္းစီ မွန္း သိျပီးသားျဖစ္သည္။ ကြ်န္ေတာ္တုိ့ အသုံးျပု လုိေသာ collection တြင္ item ဘယ္နွစ္ခု ပါေျကာင္း ကုိ ကြ်န္ေတာ္တုိ့ သိဖုိ့ မလုိ အပ္ေပ။<code>my_array.each</code> ဟု ဆုိလုိက္သည္နွင္ ့ <code>my_array</code> အတြင္းမွ item တစ္ခုခ်င္းစီကုိ သုံးမည္မွန္းသိျပီးသားျဖစ္သည္။ <code>my_array</code> တြင္ item မည္မ်ွ ပါသည္ကုိ သိစရာမလုိေပ။ <code>my_array</code> မွာ item 5 ခု ပါလည္း ဤကုတ္ က မွန္ေနျပီး 10 ခု ပါလည္း မွန္ေနမည္သာျဖစ္သည္။ <code>my_array</code> ၏ item အေရအတြက္ကဲ့ သုိ့ မလုိအပ္ေသာ အခ်က္အလက္မ်ားအား ကြ်န္ေတာ္တုိ့ မွတ္ထားစရာမလုိေတာ့ေပ။ ထုိ့အျပင္ <code>my_array</code> ၏ item အေရအတြက္ ေျပာင္းလဲခဲ့ လွ်င္ ပင္ ကြ်န္ေတာတုိ့ ကုတ္ က မွန္ေနမည္ ျဖစ္ျပီး ကြ်န္ေတာ္တုိ့ ျပု ုလုပ္လုိေသာ အရာကုိ က်စ္က်စ္လ်စ္လ်စ္ ျဖင့္ ေဖာ္ျပနုိင္ျခင္းသည္က ပင္ ရူဘီ ၏ စြမ္းအားျဖစ္ေပသည္။</p>

<h4><code>times</code> method</h4>

<p>   <code>each</code> ကဲ့သုိ့ အသုံး၀င္ျပီး က်စ္လ်စ္ေသာ ေနာက္ ထပ္ method တစ္ခုမွာ <code>times</code> method ျဖစ္သည္။ <code>times</code> method မွာ 1,2,3.. အစရွိေသာ နံပါတ္ object မ်ားအတြင္း ထည့္သြင္းေပးထားေသာ method ျဖစ္သည္။ ၎၏ english အဓိပ္ပါယ္ အတိုင္း  ဘယ္နွျကိမ္ ဟူေသာ အဓိပ္ပါယ္မ်ိ  ုးျဖစ္သည္။ ဥပမာ <code>4.times</code> ဆုိ လွ်င္ ၄ ျကိမ္၊ <code>5.times</code> ဆုိလွ်င္ ၅ ျကိမ္ အစရွိသျဖင့္ အျကိမ္အေရအတြက္ အတိအက် ပတ္လုိ ေသာ loop structure မ်ားတြင္ အသုံးျပု သည္။ ၎ သည္ လည္း <code>each</code> method ကဲ့သို့  block တစ္ခုကို parameter အျဖစ္ လက္ခံျပီး ထုိ block ကုိ သတ္မွတ္ထားေသာအျကိမ္အေရအတြက္ အတုိင္း execute လုပ္ျခင္းျဖစ္သည္။ <code>times</code> method အတြက္ block parameter သည္ optional ျဖစ္သည္။ parameter ထည့္ေပးခဲ့လွ်င္ ထုိ parameter အတြင္း loop counter ကုိ ထည့္၍ ကုတ္အပိုင္းအစကုိ execute လုပ္သြားမည္ျဖစ္သည္။ သတိထားရမည္မွာ loop counter မွာ 0 မွ စတင္ျခင္းျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;times method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   0
</span><span class='line'>   1
</span><span class='line'>   2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>upto</code> method</h4>

<p>   <code>upto</code> သည္ လည္း <code>times</code> ကဲ့ သုိ့ ပင္ နံပါတ္ object မ်ားျဖင့္သုံးရေသာ method ျဖစ္သည္။ <code>upto</code> က ေနာက္ထပ္ parameter တစ္ခု ပုိလုိသည္။ မည္ ၍ မည္မွ် အထိ ဟူ သည့္ parameter ျဖစ္သည္။ ဥပမာ <code>1.upto 10</code> ဆုိလွ်င္ 1 မွ 10 အထိ , <code>5.upto(10)</code> ဆိုလွ်င္ 5 မွ 10 အထိ (~ ၀ုိက္ကြင္းမွာ optional ျဖစ္သည္) စသျဖင့္ သုံးနုိင္သည္။ ၎ သည္ လည္း block တစ္ခု လုိပါသည္။ times ကဲ့သုိ့ပင္ block အတြက္ parameter မွာ optional ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;upto method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   3
</span><span class='line'>   4
</span><span class='line'>   5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>step</code> method</h4>

<p>   <code>step</code> method သည္ loop counter step ကုိ 1 ထက္ပုိ ခ်င္ေသာ အခါ ၌ အသုံးက်ေသာ method တစ္ခုျဖစ္သည္။ <code>step</code> method အတြက္ parameter နွစ္ခု နွင့္ block တစ္ခု ေပးရပါသည္။ ပထမ parameter မွာ <code>upto</code> ကဲ့ သုိ့ မိမိ ပတ္ လုိသည္ အထိ နံပါတ္ကုိ ေပးရျပီး ဒုတိယ parameter မွာ မိမိ ေပါင္း လုိေသာ loop coutner step ကုိ ေပးရပါသည္။ အကယ္၍ loop တစ္ျကိမ္ လွ်င္ 2 ေပါင္း လုိ ပါ က ဒုတိယ parameter အား 2 ေပးရပါမည္။ ဥပမာ-
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;step method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ တြင္  3 မွ ေန၍ 10 အထိ  တစ္ျကိမ္လ််ွင္ 5 စီ တုိးသြားေသာ loop ပတ္ထားျခင္း ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   3
</span><span class='line'>   8&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>step</code> method မွာ အသုံးနည္းေသာ္လည္း တစ္ဆင့္ထက္ပုိေပါင္းေသာ loop မ်ားအတြက္ အလြယ္တကူ အသုံး ျပ ုနုိင္ေသာ method တစ္ခု ျဖစ္ပါသည္။</p>

<h4><code>each_with_index</code> method</h4>

<p>   ေနာက္ဆုံးအေန နွင့္ iterator method မ်ား ထဲမွ <code>each</code> နည္းတူ အသုံးမ်ားေသာ method တစ္ခု ကို ေဖာ္ျပခ်င္ပါသည္။ <code>each_with_index</code> method သည္ <code>each</code> method ၏ block တြင္ parameter တစ္ခု ပုိ လာ ေသာ မ် ိ ုးကြဲတစ္ခု ျဖစ္ပါသည္။ ကြ်န္ေတာ္တုိ့ collection မ်ား အသုံး ျပ ု ရာ တြင္ တစ္ခါတစ္ရံ collection item ကုိ သာ မက ၎ item ၏ index ကုိ ထည့္ သြင္း အသုံးျပ ု လုိ ေသာ အခါမ်ား ရွိတတ္ပါသည္။ ထုိ အခါမ်ားတြင္ လြန္စြာ အသုံး၀င္လာေသာ method တစ္ခု ျဖစ္ပါသည္။ ဥပမာ Array တစ္ခု အား item ေရာ index ပါ output ထုတ္လုိသည္ ဆုိပါစုိ့။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;each_with_index method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">].</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span><span class="n">index</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts index</span>
</span><span class='line'><span class="sr">  puts value</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>each</code> method တုန္းက ကြ်န္ေတာ္တုိ့ ၏ block တြင္ variable တစ္လုံးသာ ထည့္ေပးလုိက္ပါသည္။ ယခု <code>each_with_index</code> method တြင္ဒုတိယ variable တစ္လုံးပါလာျပီး ထုိ variable မွာ item တစ္ခုခ်င္းစီ ၏ index ကုိ ထည့္ေပးလုိက္ေသာ parameter တြင္ ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   0
</span><span class='line'>   a
</span><span class='line'>   1
</span><span class='line'>   b
</span><span class='line'>   2
</span><span class='line'>   c&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; <span class="o">[</span><span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;b&quot;</span>, <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
   ရူဘီ ၏ collection iterator method မ်ား စြာ က်န္ပါေသးသည္။ သုိ့ေသာ္ ယခုေဖာ္ျပထားေသာ method မ်ားမွာ မျကာခဏ ျကုံေတြ့  အသုံးျပ ု ရ မည့္ method မ်ားျဖစ္ပါသည္။ ရူဘီ standard library ၏ <code>Enumerable</code> module တြင္ အသုံး၀င္ေသာ method မ်ားစြာ ရွိပါေသးသည္။ ၎တုိ့ကုိ အလ် ဥ္ းသင့္ လွ်င္ ထပ္မံေဖာ္ျပသြားပါမည္။</p>

<p>ဆက္ပါဦးမည္..</p>

<p>ေက်းဇူးတင္ပါသည္</p>

<p><em>dbc</em></p>

<p>ေရွ့ ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၁</a></p>

<p>ေနာက္ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-3/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၃</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby နွင့္ ေတြ့ ဆုံျခင္း ၁]]></title>
    <link href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby/"/>
    <updated>2014-05-19T12:11:11+06:30</updated>
    <id>http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby</id>
    <content type="html"><![CDATA[<p>  ကြ်န္ေတာ့္ ဘ၀ တြင္ Programming နွင့္ပတ္သက္၍ အျကီးမားဆုံး အေျပာင္း အလဲ နွစ္ခု ရွိပါသည္။ ပထမတစ္ခုမွာ ကြန္ပ်ူ တာ ပထမနွစ္တြင္ ေဒါက္တာေဒါ္အိအိလုွိင္ နွင့္ C++ ျဖင့္ Programming အေျခခံကုိ သင္ျကားခဲ့ ရျခင္းျဖစ္ျပီး  ဒုတိယတစ္ခုမွာေတာ့ Ruby on Rails ကုိ စတင္ ေလ့လာခြင့္ ရခဲ့ျခင္းျဖစ္ပါသည္။ Ruby on Rails ကုိ စတင္ေလ့လာခြင့္ ရခဲ့ခ်ိန္မွ စ၍  Programming အေပါ္ထားေသာ ကြ်န္ေတာ့္ သေဘာထား မ်ား စြာ ေျပာင္းလဲခဲ့ ပါသည္။ ယင္းမတုိင္မီ က  Web Development သည္ ကြ်န္ေတာ့ အတြက္ ခက္ခဲေသာ ဘာသာတစ္ခုျဖစ္ခဲ့ သည္။ သုိ့ေသာ္ Convention Over Configuration နွင့္ Programmer Happiness ကုိ အဓိကထားေသာ Rails Framework နွင့္ Ruby Language က Web Development ကုိ လြယ္ကူေအာင္ ဖန္တီးေပးခဲ့သည္။ ထုိ့ အျပင္ ယခင္ က Programming Language အသစ္မ်ား၊ Technology အသစ္မ်ားကုိ ေျကာက္ရြံ ့ခဲ့ေသာ ကြ်န္ေတာ့္ကုိ လည္း  အသစ္ အဆန္း ဆုိတာ ေျကာက္စရာမဟုတ္ေျကာင္း မီးေမာင္းထုိးျပေပးခဲ့ပါသည္။ _why က ေျပာခဲ့သည့္ Vitamin Rအား ကြ်န္ေတာ္နွင့္ အလားတူ ခံစားေနရသူမ်ား အတြက္ ကြ်န္ေတာ္ တတ္စြမ္းသေလာက္ ကြ်န္ေတာ္ ျပန္လည္ ေ၀မွ်ခ်င္သည့္အတြက္ ဤ စာကုိ ေရးပါသည္။</p>

<blockquote><p>Vitamin R. Goes straight to the head. Ruby will teach you to express your ideas through a computer. You will be writing stories for a machine.
* Why&rsquo;s Poignant guide to Ruby-_why_the_lucky_stiff*</p></blockquote>

<p>  ရူဘီ အေျခခံကုိ ေလ့လာရန္ အတြက္  ေလ့လာစရာ အရင္းအျမစ္မ်ား အင္တာနက္ေပါ္တြင္ အလြန္မ်ားျပားပါသည္။ သုိ့ေသာ္ ၀မ္းနည္းစရာတစ္ခ်က္က ကြ်န္ေတာ္ ဤ စာကို ေရးသည့္အခ်ိန္ ထိ ျမန္မာဘာသာျဖင့္ ေရးသားေသာ ရူဘီ ပရုိဂရမ္မင္း အေျကာင္း စာမ်ား အေတာ္ပင္နည္းပါး လွပါသည္။ ထုိ ကဲ့ သုိ့ လြတ္ေနေသာ ကြက္လပ္ တစ္ခု တြင္ တတ္စြမ္းသမွ် ၀င္ေရာက္ ျဖည့္ဆည္းေပးခ်င္ပါသည္။</p>

<p>  ကြ်န္ေတာ္ ရူဘီကုိ စတင္ေလ့လာ စဥ္ က  Java,C++,Javascript အစရွိသည့္ ပရုိဂရမ္ဘာသာစကားမ်ား အထိုက္အသင့္ ေလ့လာခဲ့ ျပီး ျဖစ္ပါသည္။ ထုိ့ အတြက္ ပရုိဂရမ္ဘာသာစကား အားလုံးအတြက္ အေျခ ခံ ျဖစ္ေသာ variable, loop, function, array, data types, conditionals အစရွိသည္မ်ား ကုိ ကြ်မ္း၀င္ ျပီး ျဖစ္သည္။ ဤ စာဖတ္သူ အမ်ားစုလည္း  အလားတူ ျဖစ္မည္ ဟု ယူဆပါသည္။ ထုိ့ေျကာင့္ ထုိ အပုိင္းမ်ားကို ကြ်န္ေတာ္ ေသခ်ာ ရွင္းျပမည္ မဟုတ္ပါ။ အျခား language မ်ားနွင့္ ကြဲျပားျခားနား သည္မ်ားကို သာ ဦးစားေပးေရးသြားမည္ျဖစ္ပါသည္။ ထို့ အတူ ရူဘီ ကုိ install လုပ္ ျခင္း နွင့္ သက္ဆုိင္ ေသာအေျကာင္းအရာမ်ားကုိ လည္း ေရးသြားမည္မဟုတ္ပါ။ အကယ္၍ ရူဘီကုိ install လုပ္ခ်င္ပါက &ldquo;how to install ruby&rdquo; ဟုသာ ဂူဂယ္ လုိက္ပါ။ သိပ္အခက္အခဲ မရွိပဲ သြင္းနုိင္ပါလိမ့္မည္။ပထမဆုံး variable မ်ားအေျကာင္းက စပါမည္။</p>

<!-- more -->


<h3>Variables</h3>

<p>  ရူ ဘီ သည္ dynamic language တစ္ခု ျဖစ္ပါသည္။ ထုိ့ ေျကာင့္ variable ေျကညာျခင္းကုိ သတ္သတ္လုပ္စရာ မလုိပါ။ စသုံးသည့္ ေနရာမွာ တင္ ေျကညာလုိက္လုိ့ ရပါသည္။ဥပမာ <code>a = 1</code> ဟု ေရးလုိက္ လွ်င္ a ဟူေသာ variable ကုိ ေျက ညာျပီး 1 ဟူသည့္ တန္ဖုိး ထည့္ ျပီး ျဖစ္သည္။ @ နွင့္ စေသာ variable မ်ား မွာ instance variable မ်ား တစ္နည္း အားျဖင့္ object တစ္ခု ၏ ကုိယ္ပုိင္ member variable မ်ား ျဖစ္သည္။ ဥပမာ <code>@name</code> ဟု ေရးလွ်င္ @name သည္ ထုိ variable ကုိ အသုံးျပု သည့္  class ၏ member variable ျဖစ္သည္။ Instance အဆင့္မဟုတ္ ပဲ class အဆင့္ variable မ်ားအား @@ နွစ္လုံးျဖင့္ ေရးပါသည္။ ဥပမာ <code>@@count</code> ဟုေရးလ်ွင္ ထုိ class တစ္ခုလုံး နွင့္ သက္ဆုိင္သည့္ shared variable တစ္လုံးအျဖစ္ အသုံး ျပု နုိင္ပါသည္။ <code>name</code>, <code>person</code> အစရွိသျဖင့္ ပုံမွန္ နာမည္ အားလုံး သည္ local variable ဒါမွမဟုတ္ method call အျဖစ္ သတ္မွတ္ပါသည္။ ရူဘီ တြင္ ruby keyword, space သုိ့မဟုတ္ ဂဏန္းျဖင့္စေသာ နာမည္မ်ားမွ လြဲ၍ variable အမည္ ေပးနုိင္ပါသည္။ က်န္ေသာ language မ်ား နွင့္ သိပ္မကြာ ျခားပါ။ Global variable မ်ားကုိ ေတာ့ $ ျဖင့္ စတင္ပါသည္။ ဥပမာ <code>$name</code> သည္ Global variable တစ္လုံးျဖစ္ပါသည္။ ရူဘီ တြင္ variable မ်ား၊ method မ်ား အား နာမည္ေပးရာတြင္ စကားလုံးျခားနားေသာပုဒ္မ်ား တြင္ underscore &ldquo;_&rdquo; (snake case ဟုေခါ္ပါသည္)  ျဖင့္ သုံးေလ့ရွိပါသည္။ ဥပမာ <code>user_name</code>, <code>my_var</code> အစရွိသျဖင့္ သုံးေလ့ရွိပါသည္။ Java အစရွိေသာ language မ်ားတြင္ Camel Case ဟုေခါ္ေသာ အစဆုံးစာလုံးအေသး ေနာက္ စကားစုမ်ားကုိ အစစာလုံး အျကီးနွင့္ေရးေလ့ရွိေသာ ပုံစံကုိ သုံးေလ့မရွိပါ။ သုံး၍ေတာ့ ရပါသည္။ ထုံးစံမရွိျခင္းသာ ျဖစ္ပါသည္။</p>

<h3>Types</h3>

<p>  ရူဘီ သည္ loosely-typed language တစ္ခုျဖစ္သည္။ တစ္နည္းအားျဖင့္ variable တစ္လုံး ၏ အမ်ိ  ုး အစားကုိ မျဖစ္မေနသတ္မွတ္ရန္မလုိေပ။ variable တစ္လုံး အား &ldquo;String&rdquo; ျဖစ္ေစ &ldquo;Integer&rdquo; ျဖစ္ေစ အျခား Object တစ္ခုခု ျဖစ္ေစ assign လုပ္ခြင့္ရွိပါသည္။ သို့ ေသာ္ Type လုံး၀ ကင္းမဲ့သည္ေတာ့မဟုတ္ပါ။ variable အားလုံးသည္ object မ်ား ျဖစ္၍ ထုိ object အတြင္း ထည့္သြင္းထားသည့္ အမ် ိ ုးအစားကုိ ေတာ့ ေဆာင္ေနမည္ျဖစ္ပါသည္။ ဥပမာ <code>a = "Hello"</code> ဟု ေရးလွ်င္ variable a သည္ String type ေဆာင္သည့္ variable ျဖစ္ေနပါမည္။ သုိ့ေသာ္ <code>a = 2</code> ဟု ေျပာင္းလဲလုိက္ပါက ၎၏ type လည္း လုိက္ ေျပာင္းသြားမည္ျဖစ္သည္။ ထုိ့ေျကာင့္ explicit type conversion ေခါ္ type ေျပာင္းလဲေပးရျခင္းကုိ ပရုိဂရမ္မာ က တာ၀န္ယူစရာမလုိပါ။ သုိ့ေသာ္ object အခ်င္းခ်ငး္ message မ်ား ပုိ့ရာတြင္ basic  type မ်ား ေျပာင္းလဲလုိ ပါက  explicit ေျပာင္းလဲနုိင္ရန္ to_s, to_i အစရွိသျဖင့္ Type Conversion Method မ်ား ထည့္သြင္းေပးထားပါသည္။</p>

<h3>Hello World</h3>

<p>  Programming Language မ်ား ေလ့လာရာတြင္ Hello World program ျဖင့္ စတင္ျခင္းသည္ ထုံး စံ တစ္ခု လုိပင္ ျဖစ္ေနပါျပီ။ ရူဘီ အတြက္ Hello World မွာ အလြန္ လြယ္ကူ ပါသည္။ <code>puts "Hello World"</code> ဆုိလွ်င္ ့ Hello World ထုတ္ေပးေသာ program တစ္ခု ျဖစ္ပါျပီ။ puts သည္ console ကုိ print ထုတ္ေပးေသာ system function တစ္ခု ျဖစ္သည္။ ေနာက္ က &ldquo;Hello World&rdquo; ဟူေသာ string ထည့္ေပးလုိက္ေသာအခါ console ေပါ္ တြင္ output ထြက္လာပါသည္။ ~ <code>puts</code> သည္ အလုိအေလ်ာက္ ေနာက္ တစ္လုိင္း ဆင္းေပးပါသည္။'\n' သတ္သတ္ထည့္ေပးစရာမလုိပါ။</p>

<p>(EDIT: 26-May-2014, ပထမအျကိမ္ ဤ ေဆာင္းပါးေရးစဥ္က Ruby Comments နွင့္ Constant မ်ား အေျကာင္းက်န္ခဲ့ ၍ ထပ္ျဖည့္ထားပါသည္။ )</p>

<h3>Comments</h3>

<p>ရူဘီ တြင္ source ကုတ္ အတြင္း commentေပးလိုပါက <code>#</code> sign ျဖင့္ စေပးရပါသည္။<code>#</code> ျဖင့္စထားေသာေနရာမွစ၍ ထုိ တစ္လုိင္းလုံးကုိ comment အျဖစ္သတ္မွတ္ျပီး execute လုပ္ရာတြင္ လ်စ္လ်ူ ရွုသြားမည္ျဖစ္ပါသည္။ ရူဘီတြင္ inline comment  ပုံစံမရွိပါ။</p>

<h3>Constants</h3>

<p>ရူဘီ တြင္ constant မ်ား အားလုံးကို  English  Capital Letter ျဖင့္ စေရးေလ့ရွိပါသည္။ class name, module name အစရွိေသာ constant မ်ားကုိ အစစာလုံးသာ အျကီးထားေလ့ရွိျပီး  တန္ဖုိး constant မ်ားကုိ ေတာ့ ALL_CAPITAL ပုံစံျဖင့္ ေရးေလ့ရွိပါသည္။</p>

<p>(END EDIT:)</p>

<h3>Methods or Functions</h3>

<p>  ရူဘီ method တစ္ခု ကုိ <code>def</code> နွင့္ <code>end</code> keyword နွစ္ခုျဖင့္ သတ္မွတ္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;ruby&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Hello World&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  ရူဘီ တြင္ method မ်ားအား အသုံးျပု ပုံဂရမ္မာက ထူးျခား ပါသည္။ အျခား language မ်ား ကဲ့ သုိ့  ၀ုိက္ကြင္း နွစ္ခု ထည့္ စရာမလုိပါ။ မိမိေခါ္လုိေသာ method name ကုိ ေရးလုိက္လွ်င္ ေခါ္လုိ့ ရပါသည္။ အကယ္၍ parameter ေပးလွ်င္ space ျခား ျပီး ေပးရုံပဲ ျဖစ္သည္။ ဥပမာ <code>puts "Hello"</code> သည္ puts method ကုိ &ldquo;Hello&rdquo; parameter ေပး၍ ေခါ္ထားျခင္းျဖစ္သည္။ multiple parameter ေပးလွ်င္ ေကာ္မာ , ခံျပီးထပ္ထည့္လုိ့ ရပါသည္။ ဥပမာ <code>add 1,2</code> သည္ add method ကုိ parameter 1 နွင့္ 2 ေပး၍ ေခါ္လိုက္ျခင္းျဖစ္သည္။အကယ္၍ ၀ုိက္ကြင္း ေပး ျပီး ေခါ္ခ်င္လွ်င္လည္း ေခါ္လုိ့ ရပါသည္။ ဥမာ <code>add(1,2)</code>သည္ လည္း မွန္ကန္ေသာ ေရးနည္းျဖစ္သည္။ မ်ားေသာအားျဖင့္ တစ္ဆင့္ထဲေခါ္ေသာ method မ်ားကုိ space ျဖင့္ ေရးျပီး နွစ္ဆင့္သုံးဆင့္ေခါ္ ေသာ၊ ရွုပ္ေထြးနုိင္သည့္ method call မ်ားတြင္ ၀ုိက္ကြင္း ထည့္ေရးေလ့ရွိသည္။ ရူဘီ တြင္ method အားလုံးသည္ return ျပန္ ပါသည္။ return keyword ျဖင့္ သတ္သတ္ return ျပန္လုိ့ရသလုိ return keyword မပါ လွ်င္လည္း ေနာက္ဆုံ းအေျကာင္း ၏ ရလဒ္ကုိ အလုိလုိ return ျပန္ သြားမည္ျဖစ္သည္။ ရူဘီ method မ်ားအား class တစ္ခုထဲတြင္ member တစ္ခု အေနနွင့္ထည့္ေရးနုိင္သလုိ global space တြင္  သူ့ခ်ည္းသက္သက္လည္း ေရးနုိင္ပါသည္။</p>

<p>မွတ္ခ်က္။ ။ ရူဘီသည္ object မ်ားကုိ အေျခခံထားေသာ language တစ္ခုျဖစ္ပါသည္။ ရူဘီ တြင္ အရာရာ သည္ object မ်ား နွင့္ ၎တုိ့ အခ်င္းခ်င္း ဆက္သြယ္ေနျကေသာ message မ်ားသာျဖစ္ပါသည္။ထုိအေျကာင္းကုိ class နွင့္ object မ်ားအေျကာင္းေရာက္မွ အေသးစိတ္ရွင္းသြားပါမည္။</p>

<h3>Conditionals</h3>

<p>  အျခားျခားေသာ language မ်ားလုိပင္ ရူဘီ တြင္လည္း conditional statement မ်ား ေရးနုိင္ပါသည္။ if  ေနာက္တြင္ မိမိစစ္လုိေသာ မွန္\မွား expression ကုိ ေရး၍ then ေနာက္တြင္ မွန္လွ်င္လုပ္မည့္ expression, else ေနာက္တြင္ မွားလွ်င္ လုပ္မည့္ expression ကုိ ေရးရပါသည္။ မွတ္ရမည့္တစ္ခ်က္မွာ if ဖြင့္ ျပီးတုိင္း ေနာက္က end ပိတ္ေပးရျခင္းျဖစ္သည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;ruby&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if true then</span>
</span><span class='line'><span class="sr">    puts &quot;True&quot;</span>
</span><span class='line'><span class="sr">else </span>
</span><span class='line'><span class="sr">    puts &quot;False&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
else ကုိျကားထဲတြင္ ျကုိက္သေလာက္ ညွပ္ထည့္၍ေရးနုိင္ပါသည္။ မွန္\မွား expression ကုိ <code>()</code> ၀ုိက္ကြင္း မထည့္လည္းရပါသည္။ အဓိကက if တစ္ခုဖြင့္တုိင္း ထုိ if နွင့္သက္ဆုိင္ရာ အဆုံးသတ္တြင္ <code>end</code> ထည့္ေပးရျခင္းျဖစ္သည္။ ရူဘီတြင္ if နွင့္ ဆန့္က်င္ဘက္ unless လည္းရွိပါသည္။ unless မွာ if not နွင့္ အတူတူျဖစ္သည္။ ပုိမုိ ရုိးရွင္းေသာ english grammar ပုံစံအတုိင္းေရး နုိင္ေအာင္ ထည့္သြင္းေပးထားျခင္းျဖစ္သည္။ unless ကုိ သုံးခ်င္လွ်င္ <code>if</code> ေနရာမွာ <code>unless</code> ကုိ အစားထုိးေရးရုံပဲ ျဖစ္သည္။ <code>if</code> <code>unless</code> နွစ္ခုလုံးကုိ အတုိေရးနုိင္ေသာ ပုံစံလည္းရွိသည္။ တစ္ေျကာင္း if ဟုတ္ ေခါ္ေသာ ပုံစံျဖစ္သည္။ မွန္လွ်င္လုပ္မည့္ expression ကုိ ေရွ့ က ေရး၍  ေနာက္ တြင္ <code>if</code> နွင့္ မွန္\မွား expression ကုိ ထည့္ရသည္။ဥပမာ <code>puts "True" if true</code> , <code>puts "false" unless false</code> စသျဖင့္ ပုံစံမ်ိ  ုး ျဖစ္သည္။ တစ္ေျကာင္း ပုံစံတြင္ <code>end</code> keyword ထည့္ေပးရန္မလုိပါ။
  ရူဘီတြင္ switch statement လည္းရွိပါသည္။ သုိ့ေသာ္ switch keyword ကိုေတာ့ မသုံးပါ။ case&hellip;when ပုံစံျဖင့္ သုံးပါသည္။ <code>case</code>ေနာက္ တြင္ စစ္ခ်င္ေသာ မွန္\မွား expression ကုိ ထည့္၍ ေအာက္ က when ေနာက္တြင္ မိမိစစ္ခ်င္ေသာ expression တစ္ခုခ်င္းအတြက္ စစ္နုိင္ပါသည္။default statement ကိုေတာ့ else ျဖင့္ သုံးရပါသည္။ အားလုံးျပီးသြားလွ်င္ <code>end</code> keyword ပိတ္ေပးဖုိ့လုိပါသည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;ruby&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;my_number = 3</span>
</span><span class='line'><span class="sr">case my_number</span>
</span><span class='line'><span class="sr">when 3</span>
</span><span class='line'><span class="sr">    puts 3</span>
</span><span class='line'><span class="sr">when 4</span>
</span><span class='line'><span class="sr">    puts 4</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">    puts &quot;Default&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Operators</h3>

<p>  ရူဘီတြင္ အျခား language မ်ားတြင္သုံးေသာ operator အမ်ား စုကုိ အသုံးျပုနုိင္ပါသည္။ သုိ့ေသာ္ +,&ndash;,<em>,/ ,% စေသာ arithmatic operator မ်ားသည္ အမွန္တကယ္ေတာ့ method name မ်ားသာ ျဖစ္ပါသည္။ ထုိ operator မ်ား အား special method မ်ားအျဖစ္ သတ္မွတ္ထားျခင္းျဖစ္သည္။ ယင္းအေျကာင္းကုိ class နွင့္ object မ်ား အေျကာင္းတြင္ ထပ္မံ ရွင္းပါမည္။ ရူဘီ တြင္ and, or နွင့္ not နွစ္မ်ိ  ုး ေရးလုိ့ ရပါသည္။ <code>and</code>, <code>or</code> နွင့္ <code>not</code> ဟူ ၍ english စာလုံးအတုိင္းျဖစ္ေစ၊ <code>&amp;&amp;</code>,<code>||</code>  နွင့္ <code>!</code> ဟူ၍ sign နွင့္ျဖစ္ေစ ေရးနုိင္ပါသည္။၎ သုံးခုမွာ non-method operator မ်ား ျဖစ္၍ method တစ္ခုကဲ့ သုိ့  အသုံးျပု၍ မရနုိင္ပါ။ အျခား conditional operator မ်ားမွာ &ldquo;>, >= ,&lt;, &lt;=, ==, ===, !=&rdquo; စသည္ျဖင့္ ျဖစ္ပါသည္။ ၎ တုိ့မွာ method မ်ား  ျဖစ္၍  override လုပ္လုိ့ ရနုိင္ပါသည္။ assignment operator မွာ <code>=</code> ျဖစ္ျပီး <code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code> စသည့္ shortcut assignment မ်ားလည္းရွိပါသည္။ <code>-</code> နွင့္ <code>+</code> ကို unary တစ္လုံး operator မ်ား အျဖစ္လည္းသုံးနုိင္ပါသည္။ <code>++</code> နွင့္ <code>--</code> ကဲ့သုိ့ increment operator မရွိပါ။ ထူးျခားသည့္ operator အခ်ိ  ု့ မွာ namespace operator <code>::</code>, array subscript operator <code>[]</code> နွင့္  <code>&lt;&lt;</code> operator တုိ့ ျဖစ္သည္။ ၎တုိ့ ၏ အသုံးကုိ ဆီေလ်ာ္ရာ ေနရာတြင္ ထည့္သြင္းရွင္းျပသြားမည္ျဖစ္ပါသည္။ if-else conditional မ်ားကုိ ternary operator <code>? :</code> ျဖင့္လည္း ေရးနုိင္ပါသည္။ ဥပမာ <code>1===1 ? puts "one" : puts "two"</code> ပုံစံမ် ိ ုးျဖစ္သည္။ </em>,/ သည္ +,&ndash; ထက္ precedence ျမင့္ပါသည္။ Range operator မ်ား လည္းရွိပါသည္။ .. နွင့္ &hellip; မွာ range operator မ်ားျဖစ္သည္။ Range operator မ်ားသည္ ဂဏန္း နွစ္ခု အျကား အေရအတြက္ကုိ သတ္မွတ္ပါသည္။ ဥပမာ <code>1..10</code> သည္ 1 နွင့္ 10 ျကားမွ ဂဏန္း အားလုံးကို ရည္ညြွန္းပါသည္။ dot နွစ္လုံး <code>..</code>မွာ inclusive range operator ျဖစ္ျပီး <code>1..10</code> ဆုိပါက 10 ပါ အပါအ၀င္ ဆယ္လုံးျဖစ္သည္။ dot သုံးလုံး <code>...</code> ကေတာ့ non-inclusive ျဖစ္ျပီး <code>1...10</code> ဟုဆုိလွ်င္ 10 မပါ၀င္ဘဲ 1 to 9 ကုိ သာ ဆုိလုိပါသည္။ Range operator မ်ား မွာ looping statement မ်ား ေရးရာတြင္ အလြန္အသုံး၀င္ေသာ operator မ်ား ျဖစ္သည္။</p>

<p>ဆက္ပါဦးမည္..</p>

<p>ေက်းဇူးတင္ပါသည္</p>

<p><em>dbc</em></p>

<p>ေနာက္ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-2/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၂</a></p>
]]></content>
  </entry>
  
</feed>
