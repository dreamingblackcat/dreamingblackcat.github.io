<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: series | Dreaming Black Cat]]></title>
  <link href="http://dreamingblackcat.github.io/blog/categories/series/atom.xml" rel="self"/>
  <link href="http://dreamingblackcat.github.io/"/>
  <updated>2014-05-20T13:42:32+06:30</updated>
  <id>http://dreamingblackcat.github.io/</id>
  <author>
    <name><![CDATA[dbc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby နွင့္ ေတြ့ ဆုံျခင္း ၂]]></title>
    <link href="http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-2/"/>
    <updated>2014-05-20T13:20:52+06:30</updated>
    <id>http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-2</id>
    <content type="html"><![CDATA[<p>ျပီးခဲ့ ေသာ <a href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby/">ေဆာင္းပါး</a> တြင္ ရူဘီ language မိတ္ဆက္အျဖစ္ variable, types, condtionals စသည္တုိ့ အေျကာင္း ေရးခဲ့ပါသည္။ ဆက္လက္၍ looping structures မ်ား အေျကာင္း ေဖာ္ျပသြားပါမည္။</p>

<h3>Looping Structures</h3>

<p>   ပုံမွန္အားျဖင့္ programming basic တြင္ conditional မ်ား ျပီးသည္နွင့္ looping structure မ်ား လာရျမဲ ျဖစ္သည္။ သုိ့ ေသာ္ ရူဘီ တြင္ looping အသုံးျပု ပုံသည္ အျခား language မ်ားနွင့္ ျခားနားပါသည္။ Loop structure ကုိ သုံး ရန္ အေျကာင္းျပခ်က္ အျကမ္းအားျဖင့္ ၂ မ်ိ  ုး ရွိသည္ဟု ဆုိနုိင္ပါသည္။ တစ္မ် ိ ုး မွာ အျကိမ္ျကိမ္ အဖန္ဖန္ လုပ္ရေသာ အရာ မ်ား အတြက္ သုံးျခင္းျဖစ္ျပီး ေနာက္တစ္မ်ိ  ုးမွာေတာ့ collection ဟုေခါ္ေသာ data ကုိ အစုအေ၀း ျဖင့္ သိမ္းဆည္းသည့္ data structure မ်ားကုိ သုံးျခင္း၊ ျပင္ျခင္း၊ အသစ္ထည့္ျခင္း မ်ား ျပုလုပ္ရန္ျဖစ္သည္။ ရူဘီ တြင္ နွစ္မ်ိ  ုးလုံးအတြက္ loop structure မ်ား သီးသန့္ ရွိပါသည္။ ပထမတစ္မ်ိ  ုးတြင္ အက်  ုံး ၀င္ေသာ  looping မ်ား အတြက္ <code>loop</code>, <code>while</code>,<code>until</code> နွင့္ <code>for in</code> control structure မ်ား ရွိသည္။အရုိးရွင္းဆုံးမွာ <code>loop</code> statement ျဖစ္သည္။</p>

<h4><code>loop</code> statement</h4>

<p>   <code>loop</code> statement ကို အရုိးရွင္းဆုံး infinite loop တစ္ခုအတြက္သုံးနုိင္သည္။ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;loop Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="kp">loop</span> <span class="k">do</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; puts &quot;hello&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါ loop သည္ user က ctrl+c မနွိပ္မခ်င္း loop ပတ္ေနမည့္ infinite loop တစ္ခုျဖစ္သည္။ သူ့ခ်ညး္ သက္သက္ကေတာ့ သိပ္အသုံးမ၀င္ ပါ။ သုိ့ ေသာ္ ထုိ loop ကုိ control လုပ္နုိင္မည့္ <code>break</code>, <code>next</code> နွင့္ <code>redo</code> keyword မ်ားလည္းရွိပါသည္။ <code>break</code> keyword သည္ loop ကုိ ရပ္သြားေစမည့္ keyword ျဖစ္ျပီး <code>next</code> keyword ကေတာ့ လက္ရွိအျကိမ္ ေက်ာ္ ၍ ေနာက္တစ္ေက်ာ့ကုိ skip လုပ္မည့္ keyword ျဖစ္သည္။ <code>redo</code> ကေတာ့ လက္ ရွိအေက်ာ့ကုိ ထပ္ေက်ာ့ လုပ္ေစမည့္ keyword ျဖစ္သည္။ ၎ keyword မ်ား ျဖင့္ တြဲသုံးပါက loop statement သည္ လည္း အစြမ္းထက္ေသာ control structure တစ္ခု ျဖစ္လာပါသည္။</p>

<!-- more -->


<h4><code>while</code> loop</h4>

<p>   <code>while</code> statement ကေတာ့ အျခား language မ်ား နွင့္ထပ္တူျဖစ္သည္။ <code>while</code> keyword ေနာက္ တြင္ ေပးထားေသာ အေျခအေန တစ္ခု ေျပလည္ေနသ၍ looping ပတ္ေပးမည့္ statement ျဖစ္သည္။ ဥပမာ-
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;while Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">  i += 1</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ သည္ ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>until</code> loop</h4>

<p>   <code>until</code>statement သည္ while statement နွင့္ ေရးသားပုံျခင္းတူျပီး while ၏ ဆန့္က်င္ဘက္ ျဖစ္သည္။ <code>until</code> loop ၏ အသုံးျပု ပုံ မွာ <code>until</code> ေနာက္တြင္ ေပးထားေသာ conditional မေျပ လည္ေသးသ၍ျပ ုလုပ္မည္ျဖစ္ျပီး ေျပလည္သြားသည့္အခ်ိန္တြင္ ျပုလုပ္ေတာ့မည္ မဟုတ္ေပ။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;until Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">until</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">  i += 1</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ သည္ ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3
</span><span class='line'>   4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>until</code> နွင့္ <code>while</code> မွာ <code>if</code> နွင့္ <code>unless</code> ကဲ့သုိ့ပင္ ျဖစ္သည္။ ၎တုိ့ ကုိ one line loop မ်ား အျဖစ္ တစ္ေျကာင္းပုံစံျဖင့္လည္းေရးနုိင္သည္။ဥ ပမာ <code>puts i while i &gt; 4</code> , <code>puts i until i &lt; 4</code> စသျဖင့္ ပုံစံမ် ိ ုးလည္း သုံးလုိ့ရသည္။ ရူဘီ တြင္ <code>do while</code> statement မရွိေပ။ <code>do while</code> ကဲ့ သုိ့ အနည္းဆုံးတစ္ျကိမ္ လုပ္ေစလုိ ေသာ loop မ် ိ ုးတြင္ loop instruction အား <code>begin</code> နွင့္ <code>end</code> keyword မ်ား အတြင္း ၌ ထည့္ေပးရသည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;do while style Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">i</span><span class="o">=</span><span class="mi">11</span>
</span><span class='line'>   <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; print &quot;</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="sr"> &quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   i+=1</span>
</span><span class='line'><span class="sr">   end while i &amp;lt; 10</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္တြင္ begin end အတြင္းမွ expression သည္ အနည္းဆုံး တစ္ျကိမ္ အလုပ္လုပ္ မည္ ျဖစ္ျပီး ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   <span class="nv">11</span>  <span class="o">=</span>&gt;  nil
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>for in</code> loop</h4>

<p>   <code>for in</code> loop သည္ iterator ပုံစံမ်ိ  ုးသုံးရေသာ loop ျဖစ္သည္။ ဒုတိယ အမ် ိ ုးအစား loop အတြင္း ၌ ပါ၀င္ေသာ္လည္း loop structure သက္သက္ ပုံစံမ် ိ ုးျဖစ္၍ ဤ ေနရာတြင္ ေဖာ္ျပလုိက္ပါသည္။ <code>for</code> keyword ေနာက္ တြင္ မိမိ ထားလုိသည့္ variable ကုိထား ၍ <code>in</code> keyword ေနာက္တြင္ မိမိ ပတ္လုိသည္ ့ collection ကုိ ထည့္ေပးရသည္။ ဥပမာ Range object တစ္ခု ျဖစ္ေသာ <code>1..4</code> ကို ပတ္လုိသည္ ဆုိပါစို့ ။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;for in Statement&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt; puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါအတုိင္း <code>for in</code> loop ကုိသုံးနုိင္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3
</span><span class='line'>   4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
   အထက္ပါ looping control statement မ်ား အားလုံး တြင္ <code>break</code> , <code>next</code>, <code>redo</code> နွင့္ <code>retry</code> keyword မ်ားကုိ သုံးနုိင္ပါသည္။ ရူဘီ သည္ ျပသနာတစ္ခုကုိ နည္းလမ္းမ်ိ  ုးစုံ နွင့္ ေျဖရွင္းနုိင္ေသာ language တစ္ခု ျဖစ္ပါသည္။ အမွန္အကန္ဆုံးနည္း ဟူ၍ မရွိပါ။ မိမိ အဆင္ေျပသလို ယူသုံးယုံပင္ျဖစ္သည္။ ရူဘီသည္ code ၏ ေဖာ္ျပနုိင္စြမ္းကို အဓိကထားသည္ျဖစ္ရာ <code>while</code> loop ကုိ not conditional မ်ိ  ုး နွင့္ သုံးျခင္းထက္ <code>until</code> loopကုိ သုံးျခင္းမ်ိ  ုးကုိ ပုိမုိ အားေပးပါသည္။
  ပုံမွန္ ျက ုံေတြ့  ေနရေသာ ျပသနာမ်ား တြင္ data collection မ်ားကုိ ကုိင္တြယ္ျပင္ဆင္ရေသာ အေျခအေနမ်ိ  ုးက မ်ားေလ့ရွိပါသည္။ ထုိအေျခအေနမ်ား အတြက္ ဒုတိယအမ်ိ  ုးအစား loop မ်ားက ပုိ မုိ အသုံး၀င္ပါသည္။ထုိ ကဲ့ သုိ့ looping မ်ားအတြက္ ရူဘီ standard library အတြင္း iterator ပုံစံ method မ်ား စြာ ထည့္သြင္းေပးထားပါသည္။ ထုိ method မ်ား သည္ ရူဘီ ၏ <code>block</code> ,<code>proc</code> နွင့္ <code>lambda</code> object မ်ား ၏ သဘာ၀ကုိ အေျခခံထားပါသည္။ ဤေနရာတြင္ ၎တုိ့ အေျကာင္းကုိ အျကမ္းမွ်သာ ရွင္းျပီး အသုံးမ်ားေသာ iterator method မ်ားကုိ ေဖာ္ျပသြားပါမည္။</p>

<h4><code>each</code> method</h4>

<p>   iterator မ်ား အနက္ အသုံး၀င္ဆုံး method မွာ <code>each</code> method ျဖစ္သည္။ <code>each</code> method သည္ Enumerable module ၏ method တစ္ခုျဖစ္သည္။ Array, Hash အစရွိေသာ collection object မ်ားတြင္ ထည့္သြင္းေပးထားပါသည္။ <code>each</code> method ကုိ ေခါ္လုိလွ်င္ collection object ျဖင့္ ေခါ္၍ parameter အျဖစ္ block တစ္ခု ေပးရပါသည္။ ရူဘီ တြင္ block ဆုိသည္မွာ execute ျပု လုပ္နုိင္ေသာ ကုတ္အပိုင္းအစတစ္ခု ျဖစ္သည္။ ထူးျခားခ်က္မွာ ထုိ ကုတ္အပိုင္းအစကို method မ်ားတြင္ parameter အျဖစ္ ေပးနုိင္ျခင္းျဖစ္သည္။ဥပမာ Array တစ္ခုကုိ <code>each</code> method အသုံးျပ ု ၍ iterate လုပ္လုိသည္ဆုိပါစို့ &hellip;
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;each method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ တြင္ <code>[1,2,3,4]</code> သည္ Array တစ္ခုျဖစ္ျပီး  ထုိ Array ေပါ္တြင္ .each ဟူ၍ <code>each</code> method ကုိ ေခါ္လုိက္သည္။ ထုိ့ေနာက္ ၎ <code>each</code> method အား <code>do</code> နွင့္ <code>end</code> နွစ္ခုအျကားတြင္ ကုတ္အပိုင္းအစ တစ္ခု အား block အျဖစ္ parameter ေပးလုိက္ျခင္းျဖစ္သည္။ block တစ္ခု အား <code>do</code> ,<code>end</code> keyword နွစ္ခု အျကားတြင္ ကုတ္ အပိုင္းအစကုိ ေရးျခင္းျဖင့္လည္းေကာင္း၊ <code>{</code>,<code>}</code> တြန့္ကြင္း နွစ္ခု အျကားတြင္ ကုတ္အပိုင္းအစေရးျခင္းျဖင့္ လည္းေကာင္း ေဖာ္ျပနုိင္သည္။ ဤ ေနရာ တြင္ <code>do</code> , <code>end</code> ပုံစံကုိ သုံးထားျခင္းျဖစ္သည္။ <code>do</code> ၏ ေနာက္ကပ္ရပ္တြင္ <code>|</code> character နွစ္ခု အျကား ေရးထားေသာ <code>i</code> သည္ ထုိ ကုတ္အပိုင္းအစ အတြက္ parameter တစ္ခု ျဖစ္သည္။ (~ block အေျကာင္းကုိ သက္ဆုိင္ရာ ေခါင္းစဥ္ေအာက္တြင္အေသးစိတ္ထပ္မံရွင္းသြားပါမည္။)
<code>each</code> method ၏ အလုပ္လုပ္ပုံမွာ Collection အတြင္းမွ item တစ္ခုခ်င္းစီကုိ ေပးထားသည့္ block အား parameter အျဖစ္ ေပး၍ execute လုပ္ ေစျခင္း ျဖစ္သည္။ <code>for in</code> loop နွင့္ အလုပ္လုပ္ပုံျခင္းဆင္တူျဖစ္သည္။ ထုိ့ေျကာင့္ Array အတြင္း တြင္ item 3 ခု ရွိပါက item တစ္ခုခ်င္းစီကုိ parameter အျဖစ္သုံး၍ block အတြင္းမွ ကုတ္အပိုင္းအစကုိ သုံးခါ အလုပ္လုပ္သြားမည္ျဖစ္သည္။
အထက္ပါ ဥပမာ တြင္ Array item မ်ားျဖစ္ေသာ <code>1</code>,<code>2</code>,<code>3</code>,<code>4</code>တုိ့ကုိ သုံး၍ တစ္ခု ခ်င္းစီကုိ <code>i</code> အျဖစ္ျဖင့္ <code>puts i</code> statement ကုိ အလုပ္လုပ္သြားျပီး ေအာက္ပါအတုိင္း ထြက္လာမည္ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   1
</span><span class='line'>   2
</span><span class='line'>   3
</span><span class='line'>   4&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; nil
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
   <code>each</code> method သည္ အလြန္အသုံး၀င္ေသာ method တစ္ခုျဖစ္ပါသည္။ ထုိ့ အျပင္ <code>each</code> method သုံးထားေသာ ကုတ္ကုိ ျကည့္ပါ။ <code>[1,2,3,4].each</code>  english ဘာသာျဖင့္  ၁ ၂ ၃ ၄ တစ္ခုခ်င္းစီကုိ ဟု ေရးထား ျခင္းပင္ ျဖစ္သည္။ ထုိ့ေျကာင့္ each method သည္ ဘာလုပ္မည္ ျဖစ္ေျကာင္းကုိ ရွင္းရွင္းလင္းလင္းေဖာ္ျပထားျပီးသားျဖစ္သည္။ ထုိ့ အျပင္ ကြ်န္ေတာ္တုိ့ သည္ each ဟုေျပာလုိက္ခ်င္းအားျဖင့္ တစ္ခုခ်င္းစီ မွန္း သိျပီးသားျဖစ္သည္။ ကြ်န္ေတာ္တုိ့ အသုံးျပု လုိေသာ collection တြင္ item ဘယ္နွစ္ခု ပါေျကာင္း ကုိ ကြ်န္ေတာ္တုိ့ သိဖုိ့ မလုိ အပ္ေပ။<code>my_array.each</code> ဟု ဆုိလုိက္သည္နွင္ ့ <code>my_array</code> အတြင္းမွ item တစ္ခုခ်င္းစီကုိ သုံးမည္မွန္းသိျပီးသားျဖစ္သည္။ <code>my_array</code> တြင္ item မည္မ်ွ ပါသည္ကုိ သိစရာမလုိေပ။ <code>my_array</code> မွာ item 5 ခု ပါလည္း ဤကုတ္ က မွန္ေနျပီး 10 ခု ပါလည္း မွန္ေနမည္သာျဖစ္သည္။ <code>my_array</code> ၏ item အေရအတြက္ကဲ့ သုိ့ မလုိအပ္ေသာ အခ်က္အလက္မ်ားအား ကြ်န္ေတာ္တုိ့ မွတ္ထားစရာမလုိေတာ့ေပ။ ထုိ့အျပင္ <code>my_array</code> ၏ item အေရအတြက္ ေျပာင္းလဲခဲ့ လွ်င္ ပင္ ကြ်န္ေတာတုိ့ ကုတ္ က မွန္ေနမည္ ျဖစ္ျပီး ကြ်န္ေတာ္တုိ့ ျပု ုလုပ္လုိေသာ အရာကုိ က်စ္က်စ္လ်စ္လ်စ္ ျဖင့္ ေဖာ္ျပနုိင္ျခင္းသည္က ပင္ ရူဘီ ၏ စြမ္းအားျဖစ္ေပသည္။</p>

<h4><code>times</code> method</h4>

<p>   <code>each</code> ကဲ့သုိ့ အသုံး၀င္ျပီး က်စ္လ်စ္ေသာ ေနာက္ ထပ္ method တစ္ခုမွာ <code>times</code> method ျဖစ္သည္။ <code>times</code> method မွာ 1,2,3.. အစရွိေသာ နံပါတ္ object မ်ားအတြင္း ထည့္သြင္းေပးထားေသာ method ျဖစ္သည္။ ၎၏ english အဓိပ္ပါယ္ အတိုင္း  ဘယ္နွျကိမ္ ဟူေသာ အဓိပ္ပါယ္မ်ိ  ုးျဖစ္သည္။ ဥပမာ <code>4.times</code> ဆုိ လွ်င္ ၄ ျကိမ္၊ <code>5.times</code> ဆုိလွ်င္ ၅ ျကိမ္ အစရွိသျဖင့္ အျကိမ္အေရအတြက္ အတိအက် ပတ္လုိ ေသာ loop structure မ်ားတြင္ အသုံးျပု သည္။ ၎ သည္ လည္း <code>each</code> method ကဲ့သို့  block တစ္ခုကို parameter အျဖစ္ လက္ခံျပီး ထုိ block ကုိ သတ္မွတ္ထားေသာအျကိမ္အေရအတြက္ အတုိင္း execute လုပ္ျခင္းျဖစ္သည္။ <code>times</code> method အတြက္ block parameter သည္ optional ျဖစ္သည္။ parameter ထည့္ေပးခဲ့လွ်င္ ထုိ parameter အတြင္း loop counter ကုိ ထည့္၍ ကုတ္အပိုင္းအစကုိ execute လုပ္သြားမည္ျဖစ္သည္။ သတိထားရမည္မွာ loop counter မွာ 0 မွ စတင္ျခင္းျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;times method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   0
</span><span class='line'>   1
</span><span class='line'>   2&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>upto</code> method</h4>

<p>   <code>upto</code> သည္ လည္း <code>times</code> ကဲ့ သုိ့ ပင္ နံပါတ္ object မ်ားျဖင့္သုံးရေသာ method ျဖစ္သည္။ <code>upto</code> က ေနာက္ထပ္ parameter တစ္ခု ပုိလုိသည္။ မည္ ၍ မည္မွ် အထိ ဟူ သည့္ parameter ျဖစ္သည္။ ဥပမာ <code>1.upto 10</code> ဆုိလွ်င္ 1 မွ 10 အထိ , <code>5.upto(10)</code> ဆိုလွ်င္ 5 မွ 10 အထိ (~ ၀ုိက္ကြင္းမွာ optional ျဖစ္သည္) စသျဖင့္ သုံးနုိင္သည္။ ၎ သည္ လည္း block တစ္ခု လုိပါသည္။ times ကဲ့သုိ့ပင္ block အတြက္ parameter မွာ optional ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;upto method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   3
</span><span class='line'>   4
</span><span class='line'>   5&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4><code>step</code> method</h4>

<p>   <code>step</code> method သည္ loop counter step ကုိ 1 ထက္ပုိ ခ်င္ေသာ အခါ ၌ အသုံးက်ေသာ method တစ္ခုျဖစ္သည္။ <code>step</code> method အတြက္ parameter နွစ္ခု နွင့္ block တစ္ခု ေပးရပါသည္။ ပထမ parameter မွာ <code>upto</code> ကဲ့ သုိ့ မိမိ ပတ္ လုိသည္ အထိ နံပါတ္ကုိ ေပးရျပီး ဒုတိယ parameter မွာ မိမိ ေပါင္း လုိေသာ loop coutner step ကုိ ေပးရပါသည္။ အကယ္၍ loop တစ္ျကိမ္ လွ်င္ 2 ေပါင္း လုိ ပါ က ဒုတိယ parameter အား 2 ေပးရပါမည္။ ဥပမာ-
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;step method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">3</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts i</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
အထက္ပါကုတ္ တြင္  3 မွ ေန၍ 10 အထိ  တစ္ျကိမ္လ််ွင္ 5 စီ တုိးသြားေသာ loop ပတ္ထားျခင္း ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   3
</span><span class='line'>   8&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; 3
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>step</code> method မွာ အသုံးနည္းေသာ္လည္း တစ္ဆင့္ထက္ပုိေပါင္းေသာ loop မ်ားအတြက္ အလြယ္တကူ အသုံး ျပ ုနုိင္ေသာ method တစ္ခု ျဖစ္ပါသည္။</p>

<h4><code>each_with_index</code> method</h4>

<p>   ေနာက္ဆုံးအေန နွင့္ iterator method မ်ား ထဲမွ <code>each</code> နည္းတူ အသုံးမ်ားေသာ method တစ္ခု ကို ေဖာ္ျပခ်င္ပါသည္။ <code>each_with_index</code> method သည္ <code>each</code> method ၏ block တြင္ parameter တစ္ခု ပုိ လာ ေသာ မ် ိ ုးကြဲတစ္ခု ျဖစ္ပါသည္။ ကြ်န္ေတာ္တုိ့ collection မ်ား အသုံး ျပ ု ရာ တြင္ တစ္ခါတစ္ရံ collection item ကုိ သာ မက ၎ item ၏ index ကုိ ထည့္ သြင္း အသုံးျပ ု လုိ ေသာ အခါမ်ား ရွိတတ္ပါသည္။ ထုိ အခါမ်ားတြင္ လြန္စြာ အသုံး၀င္လာေသာ method တစ္ခု ျဖစ္ပါသည္။ ဥပမာ Array တစ္ခု အား item ေရာ index ပါ output ထုတ္လုိသည္ ဆုိပါစုိ့။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;each_with_index method&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">a</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">b</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">c</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">].</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">value</span><span class="p">,</span><span class="n">index</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;  puts index</span>
</span><span class='line'><span class="sr">  puts value</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;   end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>each</code> method တုန္းက ကြ်န္ေတာ္တုိ့ ၏ block တြင္ variable တစ္လုံးသာ ထည့္ေပးလုိက္ပါသည္။ ယခု <code>each_with_index</code> method တြင္ဒုတိယ variable တစ္လုံးပါလာျပီး ထုိ variable မွာ item တစ္ခုခ်င္းစီ ၏ index ကုိ ထည့္ေပးလုိက္ေသာ parameter တြင္ ျဖစ္သည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;Output&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>   0
</span><span class='line'>   a
</span><span class='line'>   1
</span><span class='line'>   b
</span><span class='line'>   2
</span><span class='line'>   c&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;<span class="o">=</span>&amp;gt; <span class="o">[</span><span class="s2">&quot;a&quot;</span>, <span class="s2">&quot;b&quot;</span>, <span class="s2">&quot;c&quot;</span><span class="o">]</span>
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
   ရူဘီ ၏ collection iterator method မ်ား စြာ က်န္ပါေသးသည္။ သုိ့ေသာ္ ယခုေဖာ္ျပထားေသာ method မ်ားမွာ မျကာခဏ ျကုံေတြ့  အသုံးျပ ု ရ မည့္ method မ်ားျဖစ္ပါသည္။ ရူဘီ standard library ၏ <code>Enumerable</code> module တြင္ အသုံး၀င္ေသာ method မ်ားစြာ ရွိပါေသးသည္။ ၎တုိ့ကုိ အလ် ဥ္ းသင့္ လွ်င္ ထပ္မံေဖာ္ျပသြားပါမည္။</p>

<p>ေရွ့ ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၁</a></p>

<p>ဆက္ပါဦးမည္..</p>

<p>ေက်းဇူးတင္ပါသည္</p>

<p><em>dbc</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby နွင့္ ေတြ့ ဆုံျခင္း ၁]]></title>
    <link href="http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby/"/>
    <updated>2014-05-19T12:11:11+06:30</updated>
    <id>http://dreamingblackcat.github.io/blog/2014/05/19/meet-ruby</id>
    <content type="html"><![CDATA[<p>  ကြ်န္ေတာ့္ ဘ၀ တြင္ Programming နွင့္ပတ္သက္၍ အျကီးမားဆုံး အေျပာင္း အလဲ နွစ္ခု ရွိပါသည္။ ပထမတစ္ခုမွာ ကြန္ပ်ူ တာ ပထမနွစ္တြင္ ေဒါက္တာေဒါ္အိအိလုွိင္ နွင့္ C++ ျဖင့္ Programming အေျခခံကုိ သင္ျကားခဲ့ ရျခင္းျဖစ္ျပီး  ဒုတိယတစ္ခုမွာေတာ့ Ruby on Rails ကုိ စတင္ ေလ့လာခြင့္ ရခဲ့ျခင္းျဖစ္ပါသည္။ Ruby on Rails ကုိ စတင္ေလ့လာခြင့္ ရခဲ့ခ်ိန္မွ စ၍  Programming အေပါ္ထားေသာ ကြ်န္ေတာ့္ သေဘာထား မ်ား စြာ ေျပာင္းလဲခဲ့ ပါသည္။ ယင္းမတုိင္မီ က  Web Development သည္ ကြ်န္ေတာ့ အတြက္ ခက္ခဲေသာ ဘာသာတစ္ခုျဖစ္ခဲ့ သည္။ သုိ့ေသာ္ Convention Over Configuration နွင့္ Programmer Happiness ကုိ အဓိကထားေသာ Rails Framework နွင့္ Ruby Language က Web Development ကုိ လြယ္ကူေအာင္ ဖန္တီးေပးခဲ့သည္။ ထုိ့ အျပင္ ယခင္ က Programming Language အသစ္မ်ား၊ Technology အသစ္မ်ားကုိ ေျကာက္ရြံ ့ခဲ့ေသာ ကြ်န္ေတာ့္ကုိ လည္း  အသစ္ အဆန္း ဆုိတာ ေျကာက္စရာမဟုတ္ေျကာင္း မီးေမာင္းထုိးျပေပးခဲ့ပါသည္။ _why က ေျပာခဲ့သည့္ Vitamin Rအား ကြ်န္ေတာ္နွင့္ အလားတူ ခံစားေနရသူမ်ား အတြက္ ကြ်န္ေတာ္ တတ္စြမ္းသေလာက္ ကြ်န္ေတာ္ ျပန္လည္ ေ၀မွ်ခ်င္သည့္အတြက္ ဤ စာကုိ ေရးပါသည္။</p>

<blockquote><p>Vitamin R. Goes straight to the head. Ruby will teach you to express your ideas through a computer. You will be writing stories for a machine.
* Why&rsquo;s Poignant guide to Ruby-_why_the_lucky_stiff*</p></blockquote>

<p>  ရူဘီ အေျခခံကုိ ေလ့လာရန္ အတြက္  ေလ့လာစရာ အရင္းအျမစ္မ်ား အင္တာနက္ေပါ္တြင္ အလြန္မ်ားျပားပါသည္။ သုိ့ေသာ္ ၀မ္းနည္းစရာတစ္ခ်က္က ကြ်န္ေတာ္ ဤ စာကို ေရးသည့္အခ်ိန္ ထိ ျမန္မာဘာသာျဖင့္ ေရးသားေသာ ရူဘီ ပရုိဂရမ္မင္း အေျကာင္း စာမ်ား အေတာ္ပင္နည္းပါး လွပါသည္။ ထုိ ကဲ့ သုိ့ လြတ္ေနေသာ ကြက္လပ္ တစ္ခု တြင္ တတ္စြမ္းသမွ် ၀င္ေရာက္ ျဖည့္ဆည္းေပးခ်င္ပါသည္။</p>

<p>  ကြ်န္ေတာ္ ရူဘီကုိ စတင္ေလ့လာ စဥ္ က  Java,C++,Javascript အစရွိသည့္ ပရုိဂရမ္ဘာသာစကားမ်ား အထိုက္အသင့္ ေလ့လာခဲ့ ျပီး ျဖစ္ပါသည္။ ထုိ့ အတြက္ ပရုိဂရမ္ဘာသာစကား အားလုံးအတြက္ အေျခ ခံ ျဖစ္ေသာ variable, loop, function, array, data types, conditionals အစရွိသည္မ်ား ကုိ ကြ်မ္း၀င္ ျပီး ျဖစ္သည္။ ဤ စာဖတ္သူ အမ်ားစုလည္း  အလားတူ ျဖစ္မည္ ဟု ယူဆပါသည္။ ထုိ့ေျကာင့္ ထုိ အပုိင္းမ်ားကို ကြ်န္ေတာ္ ေသခ်ာ ရွင္းျပမည္ မဟုတ္ပါ။ အျခား language မ်ားနွင့္ ကြဲျပားျခားနား သည္မ်ားကို သာ ဦးစားေပးေရးသြားမည္ျဖစ္ပါသည္။ ထို့ အတူ ရူဘီ ကုိ install လုပ္ ျခင္း နွင့္ သက္ဆုိင္ ေသာအေျကာင္းအရာမ်ားကုိ လည္း ေရးသြားမည္မဟုတ္ပါ။ အကယ္၍ ရူဘီကုိ install လုပ္ခ်င္ပါက &ldquo;how to install ruby&rdquo; ဟုသာ ဂူဂယ္ လုိက္ပါ။ သိပ္အခက္အခဲ မရွိပဲ သြင္းနုိင္ပါလိမ့္မည္။ပထမဆုံး variable မ်ားအေျကာင္းက စပါမည္။</p>

<!-- more -->


<h3>Variables</h3>

<p>  ရူ ဘီ သည္ dynamic language တစ္ခု ျဖစ္ပါသည္။ ထုိ့ ေျကာင့္ variable ေျကညာျခင္းကုိ သတ္သတ္လုပ္စရာ မလုိပါ။ စသုံးသည့္ ေနရာမွာ တင္ ေျကညာလုိက္လုိ့ ရပါသည္။ဥပမာ <code>a = 1</code> ဟု ေရးလုိက္ လွ်င္ a ဟူေသာ variable ကုိ ေျက ညာျပီး 1 ဟူသည့္ တန္ဖုိး ထည့္ ျပီး ျဖစ္သည္။ @ နွင့္ စေသာ variable မ်ား မွာ instance variable မ်ား တစ္နည္း အားျဖင့္ object တစ္ခု ၏ ကုိယ္ပုိင္ member variable မ်ား ျဖစ္သည္။ ဥပမာ <code>@name</code> ဟု ေရးလွ်င္ @name သည္ ထုိ variable ကုိ အသုံးျပု သည့္  class ၏ member variable ျဖစ္သည္။ Instance အဆင့္မဟုတ္ ပဲ class အဆင့္ variable မ်ားအား @@ နွစ္လုံးျဖင့္ ေရးပါသည္။ ဥပမာ <code>@@count</code> ဟုေရးလ်ွင္ ထုိ class တစ္ခုလုံး နွင့္ သက္ဆုိင္သည့္ shared variable တစ္လုံးအျဖစ္ အသုံး ျပု နုိင္ပါသည္။ <code>name</code>, <code>person</code> အစရွိသျဖင့္ ပုံမွန္ နာမည္ အားလုံး သည္ local variable ဒါမွမဟုတ္ method call အျဖစ္ သတ္မွတ္ပါသည္။ ရူဘီ တြင္ ruby keyword, space သုိ့မဟုတ္ ဂဏန္းျဖင့္စေသာ နာမည္မ်ားမွ လြဲ၍ variable အမည္ ေပးနုိင္ပါသည္။ က်န္ေသာ language မ်ား နွင့္ သိပ္မကြာ ျခားပါ။ Global variable မ်ားကုိ ေတာ့ $ ျဖင့္ စတင္ပါသည္။ ဥပမာ <code>$name</code> သည္ Global variable တစ္လုံးျဖစ္ပါသည္။ ရူဘီ တြင္ variable မ်ား၊ method မ်ား အား နာမည္ေပးရာတြင္ စကားလုံးျခားနားေသာပုဒ္မ်ား တြင္ underscore &ldquo;_&rdquo; (snake case ဟုေခါ္ပါသည္)  ျဖင့္ သုံးေလ့ရွိပါသည္။ ဥပမာ <code>user_name</code>, <code>my_var</code> အစရွိသျဖင့္ သုံးေလ့ရွိပါသည္။ Java အစရွိေသာ language မ်ားတြင္ Camel Case ဟုေခါ္ေသာ အစဆုံးစာလုံးအေသး ေနာက္ စကားစုမ်ားကုိ အစစာလုံး အျကီးနွင့္ေရးေလ့ရွိေသာ ပုံစံကုိ သုံးေလ့မရွိပါ။ သုံး၍ေတာ့ ရပါသည္။ ထုံးစံမရွိျခင္းသာ ျဖစ္ပါသည္။</p>

<h3>Types</h3>

<p>  ရူဘီ သည္ loosely-typed language တစ္ခုျဖစ္သည္။ တစ္နည္းအားျဖင့္ variable တစ္လုံး ၏ အမ်ိ  ုး အစားကုိ မျဖစ္မေနသတ္မွတ္ရန္မလုိေပ။ variable တစ္လုံး အား &ldquo;String&rdquo; ျဖစ္ေစ &ldquo;Integer&rdquo; ျဖစ္ေစ အျခား Object တစ္ခုခု ျဖစ္ေစ assign လုပ္ခြင့္ရွိပါသည္။ သို့ ေသာ္ Type လုံး၀ ကင္းမဲ့သည္ေတာ့မဟုတ္ပါ။ variable အားလုံးသည္ object မ်ား ျဖစ္၍ ထုိ object အတြင္း ထည့္သြင္းထားသည့္ အမ် ိ ုးအစားကုိ ေတာ့ ေဆာင္ေနမည္ျဖစ္ပါသည္။ ဥပမာ <code>a = "Hello"</code> ဟု ေရးလွ်င္ variable a သည္ String type ေဆာင္သည့္ variable ျဖစ္ေနပါမည္။ သုိ့ေသာ္ <code>a = 2</code> ဟု ေျပာင္းလဲလုိက္ပါက ၎၏ type လည္း လုိက္ ေျပာင္းသြားမည္ျဖစ္သည္။ ထုိ့ေျကာင့္ explicit type conversion ေခါ္ type ေျပာင္းလဲေပးရျခင္းကုိ ပရုိဂရမ္မာ က တာ၀န္ယူစရာမလုိပါ။ သုိ့ေသာ္ object အခ်င္းခ်ငး္ message မ်ား ပုိ့ရာတြင္ basic  type မ်ား ေျပာင္းလဲလုိ ပါက  explicit ေျပာင္းလဲနုိင္ရန္ to_s, to_i အစရွိသျဖင့္ Type Conversion Method မ်ား ထည့္သြင္းေပးထားပါသည္။</p>

<h3>Hello World</h3>

<p>  Programming Language မ်ား ေလ့လာရာတြင္ Hello World program ျဖင့္ စတင္ျခင္းသည္ ထုံး စံ တစ္ခု လုိပင္ ျဖစ္ေနပါျပီ။ ရူဘီ အတြက္ Hello World မွာ အလြန္ လြယ္ကူ ပါသည္။ <code>puts "Hello World"</code> ဆုိလွ်င္ ့ Hello World ထုတ္ေပးေသာ program တစ္ခု ျဖစ္ပါျပီ။ puts သည္ console ကုိ print ထုတ္ေပးေသာ system function တစ္ခု ျဖစ္သည္။ ေနာက္ က &ldquo;Hello World&rdquo; ဟူေသာ string ထည့္ေပးလုိက္ေသာအခါ console ေပါ္ တြင္ output ထြက္လာပါသည္။ ~ <code>puts</code> သည္ အလုိအေလ်ာက္ ေနာက္ တစ္လုိင္း ဆင္းေပးပါသည္။'\n' သတ္သတ္ထည့္ေပးစရာမလုိပါ။</p>

<h3>Methods or Functions</h3>

<p>  ရူဘီ method တစ္ခု ကုိ <code>def</code> နွင့္ <code>end</code> keyword နွစ္ခုျဖင့္ သတ္မွတ္ပါသည္။
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;ruby&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;puts &quot;Hello World&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
  ရူဘီ တြင္ method မ်ားအား အသုံးျပု ပုံဂရမ္မာက ထူးျခား ပါသည္။ အျခား language မ်ား ကဲ့ သုိ့  ၀ုိက္ကြင္း နွစ္ခု ထည့္ စရာမလုိပါ။ မိမိေခါ္လုိေသာ method name ကုိ ေရးလုိက္လွ်င္ ေခါ္လုိ့ ရပါသည္။ အကယ္၍ parameter ေပးလွ်င္ space ျခား ျပီး ေပးရုံပဲ ျဖစ္သည္။ ဥပမာ <code>puts "Hello"</code> သည္ puts method ကုိ &ldquo;Hello&rdquo; parameter ေပး၍ ေခါ္ထားျခင္းျဖစ္သည္။ multiple parameter ေပးလွ်င္ ေကာ္မာ , ခံျပီးထပ္ထည့္လုိ့ ရပါသည္။ ဥပမာ <code>add 1,2</code> သည္ add method ကုိ parameter 1 နွင့္ 2 ေပး၍ ေခါ္လိုက္ျခင္းျဖစ္သည္။အကယ္၍ ၀ုိက္ကြင္း ေပး ျပီး ေခါ္ခ်င္လွ်င္လည္း ေခါ္လုိ့ ရပါသည္။ ဥမာ <code>add(1,2)</code>သည္ လည္း မွန္ကန္ေသာ ေရးနည္းျဖစ္သည္။ မ်ားေသာအားျဖင့္ တစ္ဆင့္ထဲေခါ္ေသာ method မ်ားကုိ space ျဖင့္ ေရးျပီး နွစ္ဆင့္သုံးဆင့္ေခါ္ ေသာ၊ ရွုပ္ေထြးနုိင္သည့္ method call မ်ားတြင္ ၀ုိက္ကြင္း ထည့္ေရးေလ့ရွိသည္။ ရူဘီ တြင္ method အားလုံးသည္ return ျပန္ ပါသည္။ return keyword ျဖင့္ သတ္သတ္ return ျပန္လုိ့ရသလုိ return keyword မပါ လွ်င္လည္း ေနာက္ဆုံ းအေျကာင္း ၏ ရလဒ္ကုိ အလုိလုိ return ျပန္ သြားမည္ျဖစ္သည္။ ရူဘီ method မ်ားအား class တစ္ခုထဲတြင္ member တစ္ခု အေနနွင့္ထည့္ေရးနုိင္သလုိ global space တြင္  သူ့ခ်ည္းသက္သက္လည္း ေရးနုိင္ပါသည္။</p>

<p>မွတ္ခ်က္။ ။ ရူဘီသည္ object မ်ားကုိ အေျခခံထားေသာ language တစ္ခုျဖစ္ပါသည္။ ရူဘီ တြင္ အရာရာ သည္ object မ်ား နွင့္ ၎တုိ့ အခ်င္းခ်င္း ဆက္သြယ္ေနျကေသာ message မ်ားသာျဖစ္ပါသည္။ထုိအေျကာင္းကုိ class နွင့္ object မ်ားအေျကာင္းေရာက္မွ အေသးစိတ္ရွင္းသြားပါမည္။</p>

<h3>Conditionals</h3>

<p>  အျခားျခားေသာ language မ်ားလုိပင္ ရူဘီ တြင္လည္း conditional statement မ်ား ေရးနုိင္ပါသည္။ if  ေနာက္တြင္ မိမိစစ္လုိေသာ မွန္\မွား expression ကုိ ေရး၍ then ေနာက္တြင္ မွန္လွ်င္လုပ္မည့္ expression, else ေနာက္တြင္ မွားလွ်င္ လုပ္မည့္ expression ကုိ ေရးရပါသည္။ မွတ္ရမည့္တစ္ခ်က္မွာ if ဖြင့္ ျပီးတုိင္း ေနာက္က end ပိတ္ေပးရျခင္းျဖစ္သည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;ruby&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if true then</span>
</span><span class='line'><span class="sr">    puts &quot;True&quot;</span>
</span><span class='line'><span class="sr">else </span>
</span><span class='line'><span class="sr">    puts &quot;False&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
else ကုိျကားထဲတြင္ ျကုိက္သေလာက္ ညွပ္ထည့္၍ေရးနုိင္ပါသည္။ မွန္\မွား expression ကုိ <code>()</code> ၀ုိက္ကြင္း မထည့္လည္းရပါသည္။ အဓိကက if တစ္ခုဖြင့္တုိင္း ထုိ if နွင့္သက္ဆုိင္ရာ အဆုံးသတ္တြင္ <code>end</code> ထည့္ေပးရျခင္းျဖစ္သည္။ ရူဘီတြင္ if နွင့္ ဆန့္က်င္ဘက္ unless လည္းရွိပါသည္။ unless မွာ if not နွင့္ အတူတူျဖစ္သည္။ ပုိမုိ ရုိးရွင္းေသာ english grammar ပုံစံအတုိင္းေရး နုိင္ေအာင္ ထည့္သြင္းေပးထားျခင္းျဖစ္သည္။ unless ကုိ သုံးခ်င္လွ်င္ <code>if</code> ေနရာမွာ <code>unless</code> ကုိ အစားထုိးေရးရုံပဲ ျဖစ္သည္။ <code>if</code> <code>unless</code> နွစ္ခုလုံးကုိ အတုိေရးနုိင္ေသာ ပုံစံလည္းရွိသည္။ တစ္ေျကာင္း if ဟုတ္ ေခါ္ေသာ ပုံစံျဖစ္သည္။ မွန္လွ်င္လုပ္မည့္ expression ကုိ ေရွ့ က ေရး၍  ေနာက္ တြင္ <code>if</code> နွင့္ မွန္\မွား expression ကုိ ထည့္ရသည္။ဥပမာ <code>puts "True" if true</code> , <code>puts "false" unless false</code> စသျဖင့္ ပုံစံမ်ိ  ုး ျဖစ္သည္။ တစ္ေျကာင္း ပုံစံတြင္ <code>end</code> keyword ထည့္ေပးရန္မလုိပါ။
  ရူဘီတြင္ switch statement လည္းရွိပါသည္။ သုိ့ေသာ္ switch keyword ကိုေတာ့ မသုံးပါ။ case&hellip;when ပုံစံျဖင့္ သုံးပါသည္။ <code>case</code>ေနာက္ တြင္ စစ္ခ်င္ေသာ မွန္\မွား expression ကုိ ထည့္၍ ေအာက္ က when ေနာက္တြင္ မိမိစစ္ခ်င္ေသာ expression တစ္ခုခ်င္းအတြက္ စစ္နုိင္ပါသည္။default statement ကိုေတာ့ else ျဖင့္ သုံးရပါသည္။ အားလုံးျပီးသြားလွ်င္ <code>end</code> keyword ပိတ္ေပးဖုိ့လုိပါသည္။ ဥပမာ
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>&ldquo;ruby&rdquo; </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;my_number = 3</span>
</span><span class='line'><span class="sr">case my_number</span>
</span><span class='line'><span class="sr">when 3</span>
</span><span class='line'><span class="sr">    puts 3</span>
</span><span class='line'><span class="sr">when 4</span>
</span><span class='line'><span class="sr">    puts 4</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">    puts &quot;Default&quot;</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Operators</h3>

<p>  ရူဘီတြင္ အျခား language မ်ားတြင္သုံးေသာ operator အမ်ား စုကုိ အသုံးျပုနုိင္ပါသည္။ သုိ့ေသာ္ +,&ndash;,<em>,/ ,% စေသာ arithmatic operator မ်ားသည္ အမွန္တကယ္ေတာ့ method name မ်ားသာ ျဖစ္ပါသည္။ ထုိ operator မ်ား အား special method မ်ားအျဖစ္ သတ္မွတ္ထားျခင္းျဖစ္သည္။ ယင္းအေျကာင္းကုိ class နွင့္ object မ်ား အေျကာင္းတြင္ ထပ္မံ ရွင္းပါမည္။ ရူဘီ တြင္ and, or နွင့္ not နွစ္မ်ိ  ုး ေရးလုိ့ ရပါသည္။ <code>and</code>, <code>or</code> နွင့္ <code>not</code> ဟူ ၍ english စာလုံးအတုိင္းျဖစ္ေစ၊ <code>&amp;&amp;</code>,<code>||</code>  နွင့္ <code>!</code> ဟူ၍ sign နွင့္ျဖစ္ေစ ေရးနုိင္ပါသည္။၎ သုံးခုမွာ non-method operator မ်ား ျဖစ္၍ method တစ္ခုကဲ့ သုိ့  အသုံးျပု၍ မရနုိင္ပါ။ အျခား conditional operator မ်ားမွာ &ldquo;>, >= ,&lt;, &lt;=, ==, ===, !=&rdquo; စသည္ျဖင့္ ျဖစ္ပါသည္။ ၎ တုိ့မွာ method မ်ား  ျဖစ္၍  override လုပ္လုိ့ ရနုိင္ပါသည္။ assignment operator မွာ <code>=</code> ျဖစ္ျပီး <code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code> စသည့္ shortcut assignment မ်ားလည္းရွိပါသည္။ <code>-</code> နွင့္ <code>+</code> ကို unary တစ္လုံး operator မ်ား အျဖစ္လည္းသုံးနုိင္ပါသည္။ <code>++</code> နွင့္ <code>--</code> ကဲ့သုိ့ increment operator မရွိပါ။ ထူးျခားသည့္ operator အခ်ိ  ု့ မွာ namespace operator <code>::</code>, array subscript operator <code>[]</code> နွင့္  <code>&lt;&lt;</code> operator တုိ့ ျဖစ္သည္။ ၎တုိ့ ၏ အသုံးကုိ ဆီေလ်ာ္ရာ ေနရာတြင္ ထည့္သြင္းရွင္းျပသြားမည္ျဖစ္ပါသည္။ if-else conditional မ်ားကုိ ternary operator <code>? :</code> ျဖင့္လည္း ေရးနုိင္ပါသည္။ ဥပမာ <code>1===1 ? puts "one" : puts "two"</code> ပုံစံမ် ိ ုးျဖစ္သည္။ </em>,/ သည္ +,&ndash; ထက္ precedence ျမင့္ပါသည္။ Range operator မ်ား လည္းရွိပါသည္။ .. နွင့္ &hellip; မွာ range operator မ်ားျဖစ္သည္။ Range operator မ်ားသည္ ဂဏန္း နွစ္ခု အျကား အေရအတြက္ကုိ သတ္မွတ္ပါသည္။ ဥပမာ <code>1..10</code> သည္ 1 နွင့္ 10 ျကားမွ ဂဏန္း အားလုံးကို ရည္ညြွန္းပါသည္။ dot နွစ္လုံး <code>..</code>မွာ inclusive range operator ျဖစ္ျပီး <code>1..10</code> ဆုိပါက 10 ပါ အပါအ၀င္ ဆယ္လုံးျဖစ္သည္။ dot သုံးလုံး <code>...</code> ကေတာ့ non-inclusive ျဖစ္ျပီး <code>1...10</code> ဟုဆုိလွ်င္ 10 မပါ၀င္ဘဲ 1 to 9 ကုိ သာ ဆုိလုိပါသည္။ Range operator မ်ား မွာ looping statement မ်ား ေရးရာတြင္ အလြန္အသုံး၀င္ေသာ operator မ်ား ျဖစ္သည္။</p>

<p>ေနာက္ေဆာင္းပါး : <a href="http://dreamingblackcat.github.io/blog/2014/05/20/meet-ruby-2/">Ruby နွင့္ ေတြ့ ဆုံ ျခင္း ၂</a></p>

<p>ဆက္ပါဦးမည္..</p>

<p>ေက်းဇူးတင္ပါသည္</p>

<p><em>dbc</em></p>
]]></content>
  </entry>
  
</feed>
